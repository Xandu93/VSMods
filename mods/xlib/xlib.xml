<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xlib</name>
    </assembly>
    <members>
        <member name="T:XLib.XEffects.AffectedEntityBehavior">
            <summary>
            The entity can be affected by effects.
            </summary>
            <seealso cref="T:Vintagestory.API.Common.Entities.EntityBehavior" />
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.PropertyName">
            <summary>
            The name of the property tied to this entity behavior.
            </summary>
            <returns></returns>
        </member>
        <member name="P:XLib.XEffects.AffectedEntityBehavior.Effects">
            <summary>
            Gets the effects.
            </summary>
            <value>
            The effects.
            </value>
        </member>
        <member name="P:XLib.XEffects.AffectedEntityBehavior.MiningSpeedModifiers">
            <summary>
            Gets the mining speed modifiers.
            </summary>
            <value>
            The mining speed modifiers.
            </value>
        </member>
        <member name="F:XLib.XEffects.AffectedEntityBehavior.effectTimer">
            <summary>
            The timer for effects
            </summary>
        </member>
        <member name="F:XLib.XEffects.AffectedEntityBehavior.triggerTimer">
            <summary>
            The timer for effect triggers
            </summary>
        </member>
        <member name="F:XLib.XEffects.AffectedEntityBehavior.system">
            <summary>
            The effects system
            </summary>
        </member>
        <member name="F:XLib.XEffects.AffectedEntityBehavior.dirty">
            <summary>
            Marks whether the effect tree should be updated.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.#ctor(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AffectedEntityBehavior"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.Initialize(Vintagestory.API.Common.Entities.EntityProperties,Vintagestory.API.Datastructures.JsonObject)">
            <summary>
            Initializes the entity behavior.
            </summary>
            <param name="properties">The properties of this entity.</param>
            <param name="attributes">The attributes of this entity.</param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.CreateEffectsFromTree">
            <summary>
            Creates the effects from a attribute tree.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.CreateEffectsFromTree(Vintagestory.API.Datastructures.TreeAttribute)">
            <summary>
            Creates the effects from a attribute tree.
            </summary>
            <param name="effectTree">The effect tree.</param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.OnEntityDespawn(Vintagestory.API.Common.Entities.EntityDespawnData)">
            <summary>
            The event fired when the entity is despawned.
            </summary>
            <param name="despawn">The reason the entity despawned.</param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.UpdateTree">
            <summary>
            Updates the tree.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.MarkDirty">
            <summary>
            Marks this as dirty.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.OnGameTick(System.Single)">
            <summary>
            The event fired when a game ticks over.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.OnEntityDeath(Vintagestory.API.Common.DamageSource)">
            <summary>
            The event fired when the entity dies.
            </summary>
            <param name="damageSourceForDeath">The source of damage for the entity.</param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.OnEntityReceiveDamage(Vintagestory.API.Common.DamageSource,System.Single@)">
            <summary>
            The event fired when the entity receives damage.
            </summary>
            <param name="damageSource">The source of the damage</param>
            <param name="damage">The amount of the damage.</param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.AddEffect(XLib.XEffects.Effect)">
            <summary>
            Adds an effect.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.IsAffectedBy(System.String)">
            <summary>
            Determines whether the entity is affected by an effect with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the entity is effected by an effect with the specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.RemoveEffect(System.String,System.Boolean)">
            <summary>
            Removes an effect with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="allowDisplayNames">if set to <c>true</c> the method also looks for matching display names.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.Clear">
            <summary>
            Clears all effects.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.Effect(System.String)">
            <summary>
            Gets an effect with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.AddMiningSpeedMultiplier(Vintagestory.API.Common.EnumTool,System.Single)">
            <summary>
            Adds a mining speed multiplier.
            Add 1/multiplier to remove the multiplier
            </summary>
            <param name="tool">The tool.</param>
            <param name="multiplier">The multiplier.</param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.GetMiningSpeedMultiplier(Vintagestory.API.Common.EnumTool)">
            <summary>
            Gets the mining speed multiplier for the specified tool.
            </summary>
            <param name="tool">The tool.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.IsImmune(System.String)">
            <summary>
            Determines whether the entity is immune to an effect.
            </summary>
            <param name="name">The name of the effect.</param>
            <returns>
              <c>true</c> if the entity is immune to an effect with the specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.SetImmunity(System.String,System.Single)">
            <summary>
            Sets whether the entity is immune to an effect.
            </summary>
            <param name="name">The name of the effect.</param>
            <param name="duration">The immunity duration.</param>
        </member>
        <member name="M:XLib.XEffects.AffectedEntityBehavior.GetImmunity(System.String)">
            <summary>
            Gets how long the entity is immune to an effect.
            </summary>
            <param name="name">The name of the effect.</param>
        </member>
        <member name="T:XLib.XEffects.CureProps">
            <summary>
            Represents the curative properties of an item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.domain">
            <summary>
            The domain name of this cure.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.effect">
            <summary>
            The effect name that is cured by the item.
            Can also be an effect category
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.effectType">
            <summary>
            The effect that is cured by the item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.duration">
            <summary>
            The duration the effect is reduced of when the item is consumed.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.minduration">
            <summary>
            The minimum duration the effect can be reduced to from this item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.intensity">
            <summary>
            The amount of the intensity change when the item is consumed.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.minintensity">
            <summary>
            The minimum intensity the effect can be reduced to from this item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.healinggrowth">
            <summary>
            The amount of immunity growth this item will provide.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.maxhealinggrowth">
            <summary>
            The maximum immunity growth you can get from this item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.healingrate">
            <summary>
            The healingrate you can get from this item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.maxhealingrate">
            <summary>
            The maximum healingrate you can get from this item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.CureProps.ingredient">
            <summary>
            Ingredients can not be eaten directly.
            </summary>
        </member>
        <member name="T:XLib.XEffects.TriggerProps">
            <summary>
            Represents the trigger properties of an item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.domain">
            <summary>
            The domain name of this cure.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.effect">
            <summary>
            The name of the effect that can be triggered.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.effectType">
            <summary>
            The effect that is triggered by the item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.chance">
            <summary>
            The chance to trigger the effect.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.perishweight">
            <summary>
            Influences the chance by the perish state of the item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.intensity">
            <summary>
            The intensity of the triggered effect.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.randomIntensity">
            <summary>
            The maximal random intensity value that will be added to the default intensity
            when the effect is triggered.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.perishIntensity">
            <summary>
            The maximal intensity value that will be added to the default intensity
            when the effect is triggered depending on the transition state of the 
            consumed item.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.duration">
            <summary>
            The duration of the triggered effect.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.randomDuration">
            <summary>
            The maximal random duration value that will be added to the default duration
            when the effect is triggered.
            </summary>
        </member>
        <member name="F:XLib.XEffects.TriggerProps.perishDuration">
            <summary>
            The maximal duration value that will be added to the default duration
            when the effect is triggered depending on the transition state of the 
            consumed item.
            </summary>
        </member>
        <member name="T:XLib.XEffects.ConsumableBehavior">
            <summary>
            Allows to consume items and blocks to get effects or cure effects.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ConsumableBehavior.cures">
            <summary>
            The effects that are cured by this consumable.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ConsumableBehavior.triggers">
            <summary>
            The effects that are triggered by this consumable.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ConsumableBehavior.UnlearnPoints">
            <summary>
            The number of unlearn points you will receive from this consumable.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ConsumableBehavior.UseTime">
            <summary>
            The item must be used the given time in seconds to be triggered.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ConsumableBehavior.Consumes">
            <summary>
            The portion that is usually consumed.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ConsumableBehavior.ShouldConsume">
            <summary>
            Should this item be consumed?
            </summary>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.#ctor(Vintagestory.API.Common.CollectibleObject)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.ConsumableBehavior"/> class.
            </summary>
            <param name="collObj"></param>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.TryPatch(System.Type)">
            <summary>
            Tries to patch the type.
            </summary>
            <param name="type">The type that should be patched.</param>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.TryPatchMethod(System.Type,System.String,HarmonyLib.Harmony,System.Reflection.BindingFlags)">
            <summary>
            Tries to patch a method.
            </summary>
            <param name="type">The type that should be patched.</param>
            <param name="methodName">The name of the method that should be patched.</param>
            <param name="harmony">The harmony api.</param>
            <param name="flags">The binding flags of the method.</param>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.Initialize(Vintagestory.API.Datastructures.JsonObject)">
            <summary>
            Called right after the block behavior was created, must call base method
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.GetUnlearnPoints(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack)">
            <summary>
            Calculates the total unlearn points. Also considers contents of containers.
            </summary>
            <returns></returns>
            <param name="world">The world.</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.OnLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Server Side: Called once the collectible has been registered 
            Client Side: Called once the collectible has been loaded from server packet
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.OnHeldInteractStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,System.Boolean,Vintagestory.API.Common.EnumHandHandling@,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when the player right clicks while holding this block/item in his hands.
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="firstEvent"></param>
            <param name="handHandling"></param>
            <param name="handling"></param>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.OnHeldInteractStep(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called every frame while the player is using this collectible. Return false to stop the interaction.
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.OnHeldInteractStop(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when the player successfully completed the using action
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.GetHeldItemInfo(Vintagestory.API.Common.ItemSlot,System.Text.StringBuilder,Vintagestory.API.Common.IWorldAccessor,System.Boolean)">
            <summary>
            Adds cure description.
            </summary>
            <param name="inSlot"></param>
            <param name="dsc"></param>
            <param name="world"></param>
            <param name="withDebugInfo"></param>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.GetCureProps(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Gets the cure props.
            Also considers ingredients and contents.
            </summary>
            <param name="itemStack">The item stack.</param>
            <param name="api">The api.</param>
            <returns>the cure props</returns>
        </member>
        <member name="M:XLib.XEffects.ConsumableBehavior.GetTriggerChance(XLib.XEffects.TriggerProps,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.IWorldAccessor,System.Single@)">
            <summary>
            Gets the trigger chance.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="slot">The slot.</param>
            <param name="world">The world.</param>
            <param name="perish">The perish.</param>
            <returns>the trigger chance</returns>
        </member>
        <member name="T:XLib.XEffects.ConsumablePatch">
            <summary>
            Patches collectibles that don't have collectibile behaviors implemented.
            </summary>
        </member>
        <member name="M:XLib.XEffects.ConsumablePatch.OnHeldInteractStartPrefix(Vintagestory.API.Common.CollectibleObject,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,System.Boolean,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            Prefix for the OnHeldInteractStart method.
            </summary>
        </member>
        <member name="M:XLib.XEffects.ConsumablePatch.OnHeldInteractStartPrefix2(Vintagestory.API.Common.CollectibleObject,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,System.Boolean,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            Same as OnHeldInteractStartPrefix but it's named handHandling instead of handling. 
            </summary>
        </member>
        <member name="M:XLib.XEffects.ConsumablePatch.OnHeldInteractStepPrefix(Vintagestory.API.Common.CollectibleObject,System.Boolean@,System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Prefix for the OnHeldInteractStep method.
            </summary>
        </member>
        <member name="M:XLib.XEffects.ConsumablePatch.OnHeldInteractStopPrefix(Vintagestory.API.Common.CollectibleObject,System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Prefix for the OnHeldInteractStop method.
            </summary>
        </member>
        <member name="T:XLib.XEffects.AnimationEffect">
            <summary>
            Represents an effect that can play player animations
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.AnimationEffect.Animation">
            <summary>
            Gets or sets the name of the animation that is played by this effect.
            </summary>
            <value>
            The name of the animation.
            </value>
        </member>
        <member name="P:XLib.XEffects.AnimationEffect.Sound">
            <summary>
            Gets or sets the sound that is played by this effect.
            </summary>
            <value>
            The sound.
            </value>
        </member>
        <member name="P:XLib.XEffects.AnimationEffect.Chance">
            <summary>
            Gets or sets the chance that the animation will be triggered.
            </summary>
            <value>
            The name of the animation.
            </value>
        </member>
        <member name="M:XLib.XEffects.AnimationEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AnimationEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.AnimationEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AnimationEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="animation">Name of the animation.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="intensity">The intensity.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.AnimationEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.AnimationEffect.ToTree">
            <summary>
            Converts to tree.
            </summary>
            <returns>
            The tree.
            </returns>
        </member>
        <member name="M:XLib.XEffects.AnimationEffect.TryPlay">
            <summary>
            Tries to play the animation and sound.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AnimationEffect.OnStart">
            <summary>
            Called after an effect was created.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AnimationEffect.OnEnd">
            <summary>
            Called when an effect ends.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AnimationEffect.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="T:XLib.XEffects.EnumAttributeEffectMod">
            <summary>
            The attribute effect Modifikation defines how a attribute effect modifies an attribute.
            By default the attribute will be set once.
            </summary>
        </member>
        <member name="F:XLib.XEffects.EnumAttributeEffectMod.Repeat">
            <summary>
            Sets the attribute at each interval.
            </summary>
        </member>
        <member name="F:XLib.XEffects.EnumAttributeEffectMod.Add">
            <summary>
            Adds the intensity to the attribute value.
            </summary>
        </member>
        <member name="F:XLib.XEffects.EnumAttributeEffectMod.RemoveWhenExpires">
            <summary>
            When the effect expires the attribute will be set to 0.
            </summary>
        </member>
        <member name="T:XLib.XEffects.AttributeEffect">
            <summary>
            Represents an effect that affects an entities attribute
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.AttributeEffect.AttributeName">
            <summary>
            Gets or sets the name of the attribute that is affected by this effect.
            </summary>
            <value>
            The name of the attribute.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeEffect.Modifikation">
            <summary>
            Gets or sets how an attribute effect modifies an attribute.
            </summary>
            <value>
            Defines how an attribute effect modifies an attribute.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeEffect.AttributeMinimum">
            <summary>
            Gets or sets the minimum of the attribute that is affected by this effect.
            </summary>
            <value>
            The minimum of the attribute.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeEffect.AttributeMaximum">
            <summary>
            Gets or sets the maximum of the attribute that is affected by this effect.
            </summary>
            <value>
            The maximum of the attribute.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeEffect.Repeats">
            <summary>
            Gets or sets a value indicating whether the effect repeats at every interval.
            </summary>
            <value>
              <c>true</c> if the effect repeats at every interval; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeEffect.RemoveWhenExpires">
            <summary>
            Gets or sets a value indicating whether the effect will set the attribute to 0 when the effect expires.
            </summary>
            <value>
              <c>true</c> if the effect will set the attribute to 0 when the effect expires; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeEffect.Adds">
            <summary>
            Gets or sets a value indicating whether the effect will add a value to an existing attribute.
            </summary>
            <value>
              <c>true</c> if the effect will add a value to an existing attribute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:XLib.XEffects.AttributeEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AttributeEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.AttributeEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.StatEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="intensity">The intensity.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.AttributeEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.AttributeEffect.ToTree">
            <summary>
            Converts to tree.
            </summary>
            <returns>
            The tree.
            </returns>
        </member>
        <member name="M:XLib.XEffects.AttributeEffect.ResultingValue(System.Nullable{System.Single},System.Single)">
            <summary>
            Calculates a resulting value.
            Takes min and max values into account if the add modifier is set.
            </summary>
            <param name="value">The original value.</param>
            <param name="mult">Just to sign the resulting intensity.</param>
            <returns>the resulting value</returns>
        </member>
        <member name="M:XLib.XEffects.AttributeEffect.OnStart">
            <summary>
            Called after an effect was created.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AttributeEffect.OnEnd">
            <summary>
            Called when an effect ends.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AttributeEffect.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="M:XLib.XEffects.AttributeEffect.Update(System.Single,System.Int32)">
            <summary>
            Updates the values of the effect.
            Some effects require a special handling when these values change.
            </summary>
            <param name="intensity">The new intensity.</param>
            <param name="stacks">The new stacks.</param>
        </member>
        <member name="T:XLib.XEffects.Condition">
            <summary>
            Represents an effect that consists of multiple effects
            </summary>
            <seealso cref="M:XLib.XEffects.Condition.Effect(System.String)" />
        </member>
        <member name="P:XLib.XEffects.Condition.MaxStacks">
            <summary>
            Sets the maximum stacks.
            </summary>
            <value>
            The maximum stacks.
            </value>
        </member>
        <member name="P:XLib.XEffects.Condition.SynchronizedMaxStackSize">
            <summary>
            Gets or sets a value indicating whether the maximum stack size is synchronized.
            </summary>
            <value>
              <c>true</c> if the maximum stack sizes of all effects in this condition are the same; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XEffects.Condition.SynchronizedInterval">
            <summary>
            Gets or sets a value indicating whether the interval is synchronized.
            </summary>
            <value>
              <c>true</c> if the interval of all effects in this condition are the same; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XEffects.Condition.Behavior">
            <summary>
            Gets the behavior.
            </summary>
            <value>
            The behavior.
            </value>
        </member>
        <member name="P:XLib.XEffects.Condition.Effetcs">
            <summary>
            Gets or sets the effetcs.
            </summary>
            <value>
            The effetcs.
            </value>
        </member>
        <member name="M:XLib.XEffects.Condition.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.Condition"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.Condition.#ctor(XLib.XEffects.EffectType,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.Condition" /> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="intensity">The intensity.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.Condition.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.Condition.ToTree">
            <summary>
            Converts to tree.
            </summary>
            <returns>
            The tree.
            </returns>
        </member>
        <member name="M:XLib.XEffects.Condition.AddEffect(XLib.XEffects.Effect,System.Boolean)">
            <summary>
            Adds the effect.
            </summary>
            <param name="effect">The effect.</param>
            <param name="shouldStart">Should be true if you use this after this effect has been started.</param>
        </member>
        <member name="M:XLib.XEffects.Condition.RemoveEffect(System.String)">
            <summary>
            Removes the effect.
            </summary>
            <param name="effectName">The effect.</param>
        </member>
        <member name="M:XLib.XEffects.Condition.OnStart">
            <summary>
            Called when an effect was created.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Condition.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Condition.OnEnd">
            <summary>
            Called when an effect ends.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Condition.OnExpires">
            <summary>
            Called when an effect expires.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Condition.OnDeath">
            <summary>
            Called when a affected entity dies.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Condition.OnRemoved">
            <summary>
            Called when an effect was removed from other sources.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Condition.OnRenewed(XLib.XEffects.Effect)">
            <summary>
            Called when the effect should be renewed.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:XLib.XEffects.Condition.Update(System.Single,System.Int32)">
            <summary>
            Updates the values of the effect.
            Some effects require a special handling when these values change.
            </summary>
            <param name="intensity">The new intensity.</param>
            <param name="stacks">The new stacks.</param>
        </member>
        <member name="M:XLib.XEffects.Condition.UpdateChildren(System.Single,System.Int32)">
            <summary>
            Updates the childrens of the effect.
            </summary>
            <param name="intensity">The new intensity.</param>
            <param name="stacks">The new stacks.</param>
        </member>
        <member name="M:XLib.XEffects.Condition.OnTick(System.Single)">
            <summary>
            Fired when a game ticks over.
            </summary>
            <param name="dt">Past time since the last tick.</param>
            <returns>true if the interval ticked over; otherwise, false</returns>
        </member>
        <member name="M:XLib.XEffects.Condition.GetIntensity(System.String)">
            <summary>
            Gets the intensity of a specific effect.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.Condition.SetIntensity(System.String,System.Single)">
            <summary>
            Sets the intensity of a specific effect.
            </summary>
            <param name="name">The name.</param>
            <param name="intensity">The intensity.</param>
        </member>
        <member name="M:XLib.XEffects.Condition.Effect(System.String)">
            <summary>
            Gets an effect with the specified name.
            Returns null if no effect with the name exists in this condition.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.Condition.GetDescription">
            <summary>
            Gets the description.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.Symptom">
            <summary>
            Represents one symptom of an disease
            </summary>
        </member>
        <member name="P:XLib.XEffects.Symptom.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
            <value>
            The trashold.
            </value>
        </member>
        <member name="P:XLib.XEffects.Symptom.TypeName">
            <summary>
            Gets or sets the name of the effect of the symptom
            </summary>
            <value>
            The name of the effect of the symptom.
            </value>
        </member>
        <member name="P:XLib.XEffects.Symptom.Effect">
            <summary>
            Gets or sets the effect associated with the symptom.
            </summary>
            <value>
            The effect.
            </value>
        </member>
        <member name="P:XLib.XEffects.Symptom.MaxIntensity">
            <summary>
            Gets or sets the maximum intensity.
            </summary>
            <value>
            The maximum intensity.
            </value>
        </member>
        <member name="P:XLib.XEffects.Symptom.Defaults">
            <summary>
            Gets or sets default values for symptoms.
            </summary>
            <value>
            The default values.
            </value>
        </member>
        <member name="T:XLib.XEffects.DiseaseEffect">
            <summary>
            Represents a disease
            </summary>
            <seealso cref="T:XLib.XEffects.Condition" />
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.SpreadRange">
            <summary>
            Gets or sets the spread range.
            </summary>
            <value>
            The spread range.
            </value>
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.SpreadChance">
            <summary>
            Gets or sets the spread chance.
            </summary>
            <value>
            The spread chance.
            </value>
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.LastSpreadTrigger">
            <summary>
            Gets or sets the last spread trigger.
            </summary>
            <value>
            The last spread trigger.
            </value>
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.LastHealingTrigger">
            <summary>
            Gets or sets the last healing trigger.
            </summary>
            <value>
            The last healing trigger.
            </value>
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.Trigger">
            <summary>
            Gets or sets the trigger.
            </summary>
            <value>
            The trigger.
            </value>
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.Symptoms">
            <summary>
            Gets the symptoms.
            </summary>
            <value>
            The symptoms.
            </value>
        </member>
        <member name="F:XLib.XEffects.DiseaseEffect._healingRate">
            <summary>
            The healing rate
            </summary>
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.HealingRate">
            <summary>
            Gets or sets the healing rate.
            </summary>
            <value>
            The healing rate.
            </value>
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.MinHealingRate">
            <summary>
            Gets or sets the minimum healing rate.
            </summary>
            <value>
            The minimum healing rate.
            </value>
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.MaxHealingRate">
            <summary>
            Gets or sets the maximum healing rate.
            </summary>
            <value>
            The maximum healing rate.
            </value>
        </member>
        <member name="P:XLib.XEffects.DiseaseEffect.HealingGrowth">
            <summary>
            Gets or sets the healing growth.
            </summary>
            <value>
            The healing growth.
            </value>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.DiseaseEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.ToTree">
            <summary>
            Converts to tree.
            </summary>
            <returns>
            The tree.
            </returns>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.OnCured(XLib.XEffects.CureProps,System.Single)">
            <summary>
            Called when an effect is cured by an item.
            </summary>
            <param name="cure">The cure props.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>
            Whether the cure was used.
            </returns>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.CheckSymptoms">
            <summary>
            Check the symptoms. Adds effects when threshold is reached.
            Removes effects when threshold is undercut.
            </summary>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.OnStart">
            <summary>
            Called when an effect was created.
            </summary>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.Update(System.Single,System.Int32)">
            <summary>
            Updates the values of the effect.
            Some effects require a special handling when these values change.
            </summary>
            <param name="intensity">The new intensity.</param>
            <param name="stacks">The new stacks.</param>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.CheckHealing">
            <summary>
            Checks if the disease should heal.
            </summary>
        </member>
        <member name="M:XLib.XEffects.DiseaseEffect.CheckSpread(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Checks if the disease should spread.
            </summary>
        </member>
        <member name="T:XLib.XEffects.DotEffect">
            <summary>
            Represents a damage over time effect.
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.DotEffect.Damage">
            <summary>
            Gets or sets the damage.
            </summary>
            <value>
            The damage.
            </value>
        </member>
        <member name="P:XLib.XEffects.DotEffect.DamageSource">
            <summary>
            Gets the damage source.
            </summary>
            <value>
            The damage source.
            </value>
        </member>
        <member name="M:XLib.XEffects.DotEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.DotEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.DotEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.Int32,System.Int32,System.Single,Vintagestory.API.Common.DamageSource)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.DotEffect" /> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="damage">The damage.</param>
            <param name="damageSource">The damage source.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.DotEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.DotEffect.ToTree">
            <summary>
            Converts to an attribute tree.
            </summary>
            <returns>The tree.</returns>
        </member>
        <member name="M:XLib.XEffects.DotEffect.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="T:XLib.XEffects.ExpireState">
            <summary>
            The expire state defines under which circumstances an effect expires.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ExpireState.Endless">
            <summary>
            The effect does not expire.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ExpireState.Death">
            <summary>
            The effect expires when the entity dies.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ExpireState.Time">
            <summary>
            The effect expires when their runtime becomes greater than their duration.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ExpireState.Intensity">
            <summary>
            The effect expires when their intensity becomes 0.
            </summary>
        </member>
        <member name="F:XLib.XEffects.ExpireState.Accumulates">
            <summary>
            The effect accumulates when merged with another effect of the same type
            instead of merging.
            </summary>
        </member>
        <member name="T:XLib.XEffects.Effect">
            <summary>
            Represents an effect that affects an entity
            </summary>
        </member>
        <member name="P:XLib.XEffects.Effect.EffectType">
            <summary>
            Gets the type of the effect.
            </summary>
            <value>
            The type of the effect.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.Runtime">
            <summary>
            Gets or sets the runtime.
            </summary>
            <value>
            The runtime.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.Interval">
            <summary>
            Gets or sets the trigger interval.
            </summary>
            <value>
            The interval.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.LastTriggered">
            <summary>
            Gets or sets the last triggered.
            </summary>
            <value>
            The last triggered.
            </value>
        </member>
        <member name="F:XLib.XEffects.Effect.maxStacks">
            <summary>
            The maximum stacks
            </summary>
        </member>
        <member name="P:XLib.XEffects.Effect.MaxStacks">
            <summary>
            Gets or sets the maximum stacks.
            </summary>
            <value>
            The maximum stacks.
            </value>
        </member>
        <member name="F:XLib.XEffects.Effect.stacks">
            <summary>
            The stacks
            </summary>
        </member>
        <member name="P:XLib.XEffects.Effect.Stacks">
            <summary>
            Gets or sets the stacks.
            </summary>
            <value>
            The stacks.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
            <value>
            The intensity.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.ExpireState">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XLib.XEffects.Effect"/> expires.
            </summary>
            <value>
            The expire state.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.ImmunityDuration">
            <summary>
            Gets or sets the immunity duration.
            </summary>
            <value>
            The immunity duration.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.Running">
            <summary>
            Gets or sets a value indicating whether the effect has been started.
            </summary>
            <value>
              <c>true</c> if the effect has been started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.ExpiresAtDeath">
            <summary>
            Gets or sets a value indicating whether the effect expires at the death of the entity.
            </summary>
            <value>
              <c>true</c> if the effect expires at the death of the entity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.ExpiresOverTime">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XLib.XEffects.Effect"/> expires over time.
            </summary>
            <value>
              <c>true</c> if expires over time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.ExpiresThroughIntensity">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XLib.XEffects.Effect"/> expires through intensity.
            </summary>
            <value>
              <c>true</c> if expires through intensity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.Accumulates">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XLib.XEffects.Effect"/> accumulates when merged with another effect.
            </summary>
            <value>
              <c>true</c> if accumulates when merged with another effect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.TimeLeft">
            <summary>
            Gets the time left.
            </summary>
            <value>
            The time left.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.Behavior">
            <summary>
            Gets the behavior.
            </summary>
            <value>
            The behavior.
            </value>
        </member>
        <member name="P:XLib.XEffects.Effect.Entity">
            <summary>
            Gets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="M:XLib.XEffects.Effect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.Effect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.Effect.#ctor(XLib.XEffects.EffectType,System.Single,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.Effect" /> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="intensity">The intensity.</param>
            <param name="interval">The interval</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.Effect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.Effect.ToTree">
            <summary>
            Converts to an attribute tree.
            </summary>
            <returns>The tree.</returns>
        </member>
        <member name="M:XLib.XEffects.Effect.OnStart">
            <summary>
            Called after an effect was created.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Effect.OnEnd">
            <summary>
            Called when an effect ends.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Effect.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Effect.OnExpires">
            <summary>
            Called when an effect expires.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Effect.OnCured(XLib.XEffects.CureProps,System.Single)">
            <summary>
            Called when an effect is cured by an item.
            </summary>
            <param name="cure">The cure props.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>
            Whether the cure was used.
            </returns>
        </member>
        <member name="M:XLib.XEffects.Effect.OnDeath">
            <summary>
            Called when an affected entity dies.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Effect.OnRemoved">
            <summary>
            Called when an effect was removed from other sources.
            </summary>
        </member>
        <member name="M:XLib.XEffects.Effect.OnRenewed(XLib.XEffects.Effect)">
            <summary>
            Called when the effect should be renewed.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:XLib.XEffects.Effect.Update(System.Single,System.Int32)">
            <summary>
            Updates the values of the effect.
            Some effects require a special handling when these values change.
            </summary>
            <param name="intensity">The new intensity.</param>
            <param name="stacks">The new stacks.</param>
        </member>
        <member name="M:XLib.XEffects.Effect.ResultingIntensity">
            <summary>
            Returns the resulting intensity.
            This is usually intensity * stacks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.Effect.OnTick(System.Single)">
            <summary>
            Fired when a game ticks over.
            </summary>
            <param name="dt">Past time since the last tick.</param>
            <returns>true if the interval ticked over; otherwise, false</returns>
        </member>
        <member name="M:XLib.XEffects.Effect.ShouldExpire">
            <summary>
            Decides whether the effect should expire now.
            Effects usually expire when their intensity becomes 0 or their runtime becomes greater than their duration. 
            </summary>
            <returns>true if the effect should expire now; otherwise, false</returns>
        </member>
        <member name="M:XLib.XEffects.Effect.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.Effect.GetDescription">
            <summary>
            Gets the description.
            Provides some default values for string interpolation.
            {0}: intensity
            {1}: interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.Effect.TimeToString(System.Single)">
            <summary>
            Converts a time to a string.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.EffectRenderer">
            <summary>
            The renderer for <seealso cref="T:XLib.XEffects.ShaderEffect"/>s
            </summary>
        </member>
        <member name="F:XLib.XEffects.EffectRenderer.capi">
            <summary>
            The client api
            </summary>
        </member>
        <member name="F:XLib.XEffects.EffectRenderer.meshRef">
            <summary>
            The mesh reference
            </summary>
        </member>
        <member name="P:XLib.XEffects.EffectRenderer.Intensity">
            <summary>
            Gets or sets the intensity.
            Is set by the effect and is the same as the effect intensity.
            </summary>
            <value>
            The intensity.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectRenderer.ShaderName">
            <summary>
            Gets the name of the shader.
            </summary>
            <value>
            The name of the shader.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectRenderer.Shader">
            <summary>
            Gets the shader.
            </summary>
            <value>
            The shader.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectRenderer.RenderOrder">
            <summary>
            The render order.
            Will be rendered as an overlay after the world was rendered.
            </summary>
        </member>
        <member name="P:XLib.XEffects.EffectRenderer.RenderRange">
            <summary>
            Within what range to the player OnRenderFrame() should be called (currently not used!)
            </summary>
        </member>
        <member name="P:XLib.XEffects.EffectRenderer.TimeMax">
            <summary>
            Gets or sets the time maximum.
            If time reaches this value time will be set to 0.
            </summary>
            <value>
            The time maximum.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectRenderer.Time">
            <summary>
            Gets or sets the time.
            This value accumulates the delta time and can be used 
            by the shader to create effects.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="M:XLib.XEffects.EffectRenderer.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.EffectRenderer"/> class.
            </summary>
            <param name="capi">The client api.</param>
            <param name="shaderName">Name of the shader.</param>
        </member>
        <member name="M:XLib.XEffects.EffectRenderer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:XLib.XEffects.EffectRenderer.OnRenderFrame(System.Single,Vintagestory.API.Client.EnumRenderStage)">
            <summary>
            Called every frame for rendering whatever you need to render.
            </summary>
            <param name="deltaTime"></param>
            <param name="stage"></param>
        </member>
        <member name="M:XLib.XEffects.EffectRenderer.Register">
            <summary>
            Loads and compiles shaders and registers this renderer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.EffectRenderer.LoadShader">
            <summary>
            Loads the shader.
            You should use the register method instead.
            This method is primarily used for the shader reload.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.EffectType">
            <summary>
            Represents an effect in general.
            </summary>
        </member>
        <member name="P:XLib.XEffects.EffectType.EffectsSystem">
            <summary>
            Gets the effects system.
            Is only valid if the effect type is registered.
            </summary>
            <value>
            The effects system.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectType.Domain">
            <summary>
            Gets the domain.
            </summary>
            <value>
            The domain.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectType.Defaults">
            <summary>
            Gets the defaults.
            </summary>
            <value>
            The defaults.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectType.Type">
            <summary>
            Gets the type of the effect.
            </summary>
            <value>
            The type of the effect.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectType.Name">
            <summary>
            Gets the internal name of this effect type. Used to save, load and identify this effect.
            This should always be the same and must be unique.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectType.DisplayName">
            <summary>
            Gets or sets the name that is displayed in the game.
            Can be localized.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectType.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectType.IconName">
            <summary>
            Gets or sets the name of the texture.
            </summary>
            <value>
            The name of the texture.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectType.EffectGroup">
            <summary>
            Gets or sets the effect group.
            Every entity can only have one effect from a group.
            </summary>
            <value>
            The effect group.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectType.EffectCategory">
            <summary>
            Gets or sets the effect category.
            Various items can influence specific effect categories.
            </summary>
            <value>
            The effect category.
            </value>
        </member>
        <member name="M:XLib.XEffects.EffectType.#ctor(System.String,System.Type,Vintagestory.API.Datastructures.ITreeAttribute,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.EffectType" /> class.
            </summary>
            <param name="name">The internal name of this effect type. Used to save, load and identify this effect type.
            This should always be the same and must be unique.</param>
            <param name="type">The type of the effect.</param>
            <param name="defaults">The defaults.</param>
            <param name="displayName">The name that is displayed in the game.</param>
            <param name="domain">The name of the domain of this effect. Is used to auto generate description string keys.</param>
            <param name="iconName">Name of the texture.</param>
            <param name="effectGroup">Group of this effect.</param>
            <param name="effectCategory">Category of this effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if name or type is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">>Is thrown if the type is not a type of an effect.</exception>
        </member>
        <member name="M:XLib.XEffects.EffectType.CreateEffect">
            <summary>
            Creates an effect.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.HeatedEffect">
            <summary>
            Increases the temperature on every interval by a specific amount up to a specific temperature.
            </summary>
            <seealso cref="T:XLib.XEffects.Effect"/>
        </member>
        <member name="P:XLib.XEffects.HeatedEffect.HeatGain">
            <summary>
            Gets or sets the heat gain.
            </summary>
            <value>
            The heat gain.
            </value>
        </member>
        <member name="P:XLib.XEffects.HeatedEffect.DestinationTemperature">
            <summary>
            Gets or sets the destination temperature.
            </summary>
            <value>
            The destination temperature.
            </value>
        </member>
        <member name="M:XLib.XEffects.HeatedEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.HeatedEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.HeatedEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.HeatedEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="heatGain">The heat gain.</param>
            <param name="destTemp">The destination temperature.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.HeatedEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.HeatedEffect.ToTree">
            <summary>
            Converts to tree.
            </summary>
            <returns>
            The tree.
            </returns>
        </member>
        <member name="M:XLib.XEffects.HeatedEffect.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="M:XLib.XEffects.HeatedEffect.GetDescription">
            <summary>
            Gets the description.
            Provides some default values for string interpolation.
            {0}: intensity
            {1}: interval
            {2}: destination temperature
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.HotEffect">
            <summary>
            Represents a heal over time effect.
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.HotEffect.Heal">
            <summary>
            Gets or sets the heal.
            </summary>
            <value>
            The damage.
            </value>
        </member>
        <member name="P:XLib.XEffects.HotEffect.DamageSource">
            <summary>
            Gets the damage source.
            </summary>
            <value>
            The damage source.
            </value>
        </member>
        <member name="M:XLib.XEffects.HotEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.DotEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.HotEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.Int32,System.Int32,System.Single,Vintagestory.API.Common.DamageSource)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.DotEffect" /> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="heal">The heal.</param>
            <param name="damageSource">The damage source.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.HotEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.HotEffect.ToTree">
            <summary>
            Converts to an attribute tree.
            </summary>
            <returns>The tree.</returns>
        </member>
        <member name="M:XLib.XEffects.HotEffect.OnInterval">
            <summary>
            Called when a interval ticks over.
            </summary>
        </member>
        <member name="T:XLib.XEffects.MomentumEffect">
            <summary>
            A mining speed effect
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.MomentumEffect.Tool">
            <summary>
            The tool
            </summary>
        </member>
        <member name="P:XLib.XEffects.MomentumEffect.Speed">
            <summary>
            Gets or sets the speed.
            Same as Intensity.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="M:XLib.XEffects.MomentumEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.MomentumEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.MomentumEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.Int32,System.Int32,System.Single,Vintagestory.API.Common.EnumTool)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.MomentumEffect" /> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="speed">The speed.</param>
            <param name="tool">The tool.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.MomentumEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.MomentumEffect.ToTree">
            <summary>
            Converts to tree.
            </summary>
            <returns>
            The tree.
            </returns>
        </member>
        <member name="M:XLib.XEffects.MomentumEffect.OnStart">
            <summary>
            Called after an effect was created.
            </summary>
        </member>
        <member name="M:XLib.XEffects.MomentumEffect.OnEnd">
            <summary>
            Called when an effect ends.
            </summary>
        </member>
        <member name="M:XLib.XEffects.MomentumEffect.OnRenewed(XLib.XEffects.Effect)">
            <summary>
            Called when the effect should be renewed.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:XLib.XEffects.MomentumEffect.Update(System.Single,System.Int32)">
            <summary>
            Updates the values of the effect.
            Some effects require a special handling when these values change.
            </summary>
            <param name="intensity">The new intensity.</param>
            <param name="stacks">The new stacks.</param>
        </member>
        <member name="T:XLib.XEffects.NutritionEffect">
            <summary>
            Represents a damage over time effect.
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.NutritionEffect.FoodCategory">
            <summary>
            Gets the food category.
            </summary>
            <value>
            The food category.
            </value>
        </member>
        <member name="M:XLib.XEffects.NutritionEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.DotEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.NutritionEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.Int32,System.Int32,System.Single,Vintagestory.API.Common.EnumFoodCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.DotEffect" /> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="damage">The damage.</param>
            <param name="FoodCategory">the food category</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.NutritionEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.NutritionEffect.ToTree">
            <summary>
            Converts to an attribute tree.
            </summary>
            <returns>The tree.</returns>
        </member>
        <member name="M:XLib.XEffects.NutritionEffect.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="T:XLib.XEffects.ReceivedDamageMultiplierEffect">
            <summary>
            A damage multiplier effect
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.ReceivedDamageMultiplierEffect.Multiplier">
            <summary>
            Gets or sets the multiplier.
            Same as Intensity.
            </summary>
            <value>
            The multiplier.
            </value>
        </member>
        <member name="M:XLib.XEffects.ReceivedDamageMultiplierEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.ReceivedDamageMultiplierEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.ReceivedDamageMultiplierEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.ReceivedDamageMultiplierEffect" /> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="multiplier">The multiplier.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.ReceivedDamageMultiplierEffect.OnStart">
            <summary>
            Called after an effect was created.
            </summary>
        </member>
        <member name="M:XLib.XEffects.ReceivedDamageMultiplierEffect.OnEnd">
            <summary>
            Called when an effect ends.
            </summary>
        </member>
        <member name="M:XLib.XEffects.ReceivedDamageMultiplierEffect.ResultingIntensity">
            <summary>
            Returns the resulting intensity.
            This is Pow(this.Multiplier, this.Stacks).
            </summary>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.ReceivedDamageMultiplierEffect.OnDamaged(System.Single,Vintagestory.API.Common.DamageSource)">
            <summary>
            Called when an entity gets damaged.
            </summary>
            <param name="damage">The damage.</param>
            <param name="dmgSource">The DMG source.</param>
            <returns>the new damage</returns>
        </member>
        <member name="T:XLib.XEffects.ShaderEffect">
            <summary>
            Represents an effect that can apply a shader program
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.ShaderEffect.ShaderName">
            <summary>
            Gets or sets the name of the shader program that is applied by this effect.
            </summary>
            <value>
            The name of the shader program.
            </value>
        </member>
        <member name="P:XLib.XEffects.ShaderEffect.Renderer">
            <summary>
            Gets or sets the renderer that applies the shader.
            </summary>
            <value>
            The shader.
            </value>
        </member>
        <member name="M:XLib.XEffects.ShaderEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.ShaderEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.ShaderEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.ShaderEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="shader">Name of the shader.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="intensity">The intensity.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.ShaderEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.ShaderEffect.ToTree">
            <summary>
            Converts to tree.
            </summary>
            <returns>
            The tree.
            </returns>
        </member>
        <member name="M:XLib.XEffects.ShaderEffect.OnStart">
            <summary>
            Called after an effect was created.
            </summary>
        </member>
        <member name="M:XLib.XEffects.ShaderEffect.OnEnd">
            <summary>
            Called when an effect ends.
            </summary>
        </member>
        <member name="M:XLib.XEffects.ShaderEffect.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="M:XLib.XEffects.ShaderEffect.Update(System.Single,System.Int32)">
            <summary>
            Updates the values of the effect.
            Some effects require a special handling when these values change.
            </summary>
            <param name="intensity">The new intensity.</param>
            <param name="stacks">The new stacks.</param>
        </member>
        <member name="T:XLib.XEffects.StatEffect">
            <summary>
            Represents an effect that affects an entities stats
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.StatEffect.StatName">
            <summary>
            Gets or sets the name of the stat that is affected by this effect.
            </summary>
            <value>
            The name of the stat.
            </value>
        </member>
        <member name="P:XLib.XEffects.StatEffect.EffectStatId">
            <summary>
            Gets or sets the stat identifier.
            Used to differ the stat modifiers from different sources.
            </summary>
            <value>
            The stat identifier.
            </value>
        </member>
        <member name="M:XLib.XEffects.StatEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.StatEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.StatEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.StatEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="statName">Name of the stat.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="intensity">The intensity.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.StatEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.StatEffect.ToTree">
            <summary>
            Converts to tree.
            </summary>
            <returns>
            The tree.
            </returns>
        </member>
        <member name="M:XLib.XEffects.StatEffect.OnStart">
            <summary>
            Called after an effect was created.
            </summary>
        </member>
        <member name="M:XLib.XEffects.StatEffect.OnEnd">
            <summary>
            Called when an effect ends.
            </summary>
        </member>
        <member name="M:XLib.XEffects.StatEffect.Update(System.Single,System.Int32)">
            <summary>
            Updates the values of the effect.
            Some effects require a special handling when these values change.
            </summary>
            <param name="intensity">The new intensity.</param>
            <param name="stacks">The new stacks.</param>
        </member>
        <member name="T:XLib.XEffects.TriggerEffect">
            <summary>
            Represents an effect that can trigger another effect when itself expires
            </summary>
            <seealso cref="T:XLib.XEffects.Effect" />
        </member>
        <member name="P:XLib.XEffects.TriggerEffect.EffectName">
            <summary>
            Gets or sets the name of the effect that is triggered by this effect.
            </summary>
            <value>
            The name of the effect.
            </value>
        </member>
        <member name="P:XLib.XEffects.TriggerEffect.EffectDuration">
            <summary>
            Gets or sets the duration of the effect that is triggered by this effect.
            </summary>
            <value>
            The duration of the effect.
            </value>
        </member>
        <member name="P:XLib.XEffects.TriggerEffect.EffectIntensity">
            <summary>
            Gets or sets the intensity of the effect that is triggered by this effect.
            </summary>
            <value>
            The intensity of the effect.
            </value>
        </member>
        <member name="P:XLib.XEffects.TriggerEffect.Chance">
            <summary>
            Gets or sets the chance to trigger the effect.
            </summary>
            <value>
            The chance to trigger the effect.
            </value>
        </member>
        <member name="M:XLib.XEffects.TriggerEffect.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.TriggerEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.TriggerEffect.#ctor(XLib.XEffects.EffectType,System.Single,System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.StatEffect"/> class.
            </summary>
            <param name="effectType">Type of the effect.</param>
            <param name="duration">The duration.</param>
            <param name="effectName">Name of the stat.</param>
            <param name="maxStacks">The maximum stacks.</param>
            <param name="stacks">The stacks.</param>
            <param name="intensity">The intensity.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if the effectType is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XEffects.TriggerEffect.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.TriggerEffect.ToTree">
            <summary>
            Converts to tree.
            </summary>
            <returns>
            The tree.
            </returns>
        </member>
        <member name="M:XLib.XEffects.TriggerEffect.OnInterval">
            <summary>
            Called when an interval ticks over.
            </summary>
        </member>
        <member name="M:XLib.XEffects.TriggerEffect.OnExpires">
            <summary>
            Called when an effect expires.
            </summary>
        </member>
        <member name="M:XLib.XEffects.TriggerEffect.CheckTrigger">
            <summary>
            Checks whether the effect should be triggered.
            </summary>
        </member>
        <member name="M:XLib.XEffects.TriggerEffect.GetDescription">
            <summary>
            Gets the description.
            Provides some default values for string interpolation.
            {0}: intensity
            {1}: interval
            {2}: interval
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.EffectBox">
            <summary>
            
            </summary>
            <seealso cref="T:Vintagestory.API.Client.GuiElement" />
        </member>
        <member name="P:XLib.XEffects.EffectBox.CursorHovers">
            <summary>
            Is true when the cursor hovers over the button
            </summary>
        </member>
        <member name="P:XLib.XEffects.EffectBox.Tooltip">
            <summary>
            The effect tooltip hud that should be updated when the cursor hovers over this box.
            So it can show the informations for the effect the cursor hovers over.
            </summary>
        </member>
        <member name="P:XLib.XEffects.EffectBox.Effect">
            <summary>
            Gets the effect.
            </summary>
            <value>
            The effect.
            </value>
        </member>
        <member name="M:XLib.XEffects.EffectBox.#ctor(Vintagestory.API.Client.ICoreClientAPI,XLib.XEffects.Effect,Vintagestory.API.Client.ElementBounds,XLib.XEffects.EffectTooltip)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.EffectBox" /> class.
            </summary>
            <param name="capi">The Client API</param>
            <param name="effect">The effect.</param>
            <param name="bounds">The bounds.</param>
            <param name="tooltipDest">The tooltip dest.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:XLib.XEffects.EffectBox.AddToComposer(Vintagestory.API.Client.GuiComposer)">
            <summary>
            Adds the elements to a composer.
            </summary>
            <param name="composer">The composer.</param>
        </member>
        <member name="M:XLib.XEffects.EffectBox.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:XLib.XEffects.EffectBox.OnMouseMove(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            Checks if the cursor hovers over this button.
            </summary>
            <param name="api">The vintage story core client api.</param>
            <param name="args">The mouse event data.</param>
        </member>
        <member name="M:XLib.XEffects.EffectBox.OnMouseMove(System.Int32,System.Int32)">
            <summary>
            Checks if the cursor hovers over this button.
            </summary>
            <param name="x">The x position of the mouse.</param>
            <param name="y">The y position of the mouse.</param>
        </member>
        <member name="T:XLib.XEffects.EffectFrame">
            <summary>
            
            </summary>
            <seealso cref="T:Vintagestory.API.Client.HudElement" />
        </member>
        <member name="P:XLib.XEffects.EffectFrame.ToggleKeyCombinationCode">
            <summary>
            Gets the toggle key combination code.
            </summary>
            <value>
            The toggle key combination code.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectFrame.ForcedState">
            <summary>
            Gets or sets the state of the element.
            0 means dynamic open/close
            -1 means never shown
            1 means always shown
            </summary>
            <value>
            The state of the forced.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectFrame.TextWidth">
            <summary>
            Gets or sets the width of the text.
            </summary>
            <value>
            The width of the text.
            </value>
        </member>
        <member name="F:XLib.XEffects.EffectFrame.effectBoxes">
            <summary>
            The text list
            </summary>
        </member>
        <member name="F:XLib.XEffects.EffectFrame.effectTooltip">
            <summary>
            A hud element that shows the effect tooltip.
            </summary>
        </member>
        <member name="M:XLib.XEffects.EffectFrame.#ctor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.EffectFrame"/> class.
            </summary>
            <param name="capi">The Client API</param>
        </member>
        <member name="M:XLib.XEffects.EffectFrame.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:XLib.XEffects.EffectFrame.OnTitleBarClose">
            <summary>
            Called when the close button on the title bar was clicked.
            </summary>
        </member>
        <member name="M:XLib.XEffects.EffectFrame.TryClose">
            <summary>
            Called every time this dialog closes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.EffectTooltip">
            <summary>
            Shows informations of an effect.
            </summary>
            <seealso cref="T:Vintagestory.API.Client.HudElement" />
        </member>
        <member name="F:XLib.XEffects.EffectTooltip.nameText">
            <summary>
            The gui text element that shows the name of the effect.
            </summary>
        </member>
        <member name="F:XLib.XEffects.EffectTooltip.descText">
            <summary>
            The gui text element that shows the description of the effect.
            </summary>
        </member>
        <member name="F:XLib.XEffects.EffectTooltip.valueNamesText">
            <summary>
            The gui text element that shows the names of some values.
            </summary>
        </member>
        <member name="F:XLib.XEffects.EffectTooltip.valuesText">
            <summary>
            The gui text element that shows current values of the effect.
            </summary>
        </member>
        <member name="P:XLib.XEffects.EffectTooltip.Effect">
            <summary>
            The current effect.
            </summary>
        </member>
        <member name="M:XLib.XEffects.EffectTooltip.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.EffectTooltip"/> class.
            </summary>
            <param name="capi">The client api.</param>
            <param name="parentBounds">The parent bounds.</param>
        </member>
        <member name="M:XLib.XEffects.EffectTooltip.Update(XLib.XEffects.Effect)">
            <summary>
            Updates this hud to provide informations of the specified effect.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="T:XLib.XEffects.AttributeTriggerAttribute">
            <summary>
            Represents a single attribute for an AttributeTrigger.
            </summary>
        </member>
        <member name="P:XLib.XEffects.AttributeTriggerAttribute.Min">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeTriggerAttribute.Max">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeTriggerAttribute.Weight">
            <summary>
            Gets or sets the weight.
            </summary>
            <value>
            The weight.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeTriggerAttribute.Stat">
            <summary>
            Gets or sets the stat.
            </summary>
            <value>
            The stat.
            </value>
        </member>
        <member name="P:XLib.XEffects.AttributeTriggerAttribute.Invert">
            <summary>
            Gets or sets a value indicating whether the calculated chance shold be inverted.
            </summary>
            <value>
              <c>true</c> if invert; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerAttribute.#ctor(System.Single,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AttributeTriggerAttribute" /> class.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="weight">The weight.</param>
            <param name="stat">The stat.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerAttribute.Chance(Vintagestory.API.Datastructures.SyncedTreeAttribute)">
            <summary>
            Calculates the chance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerAttribute.ScaledValue(System.Double)">
            <summary>
            Scales a value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.AttributeTriggerBodyTemp">
            <summary>
            
            </summary>
            <seealso cref="T:XLib.XEffects.AttributeTriggerAttribute" />
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerBodyTemp.#ctor(System.Single,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AttributeTriggerAttribute" /> class.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="weight">The weight.</param>
            <param name="stat">The stat.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerBodyTemp.Chance(Vintagestory.API.Datastructures.SyncedTreeAttribute)">
            <summary>
            Calculates the chance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.AttributeTriggerAttributeAttribute">
            <summary>
            
            </summary>
            <seealso cref="T:XLib.XEffects.AttributeTriggerAttribute" />
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerAttributeAttribute.#ctor(System.Single,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AttributeTriggerAttribute" /> class.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="weight">The weight.</param>
            <param name="stat">The stat.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerAttributeAttribute.Chance(Vintagestory.API.Datastructures.SyncedTreeAttribute)">
            <summary>
            Calculates the chance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.AttributeTriggerHealth">
            <summary>
            
            </summary>
            <seealso cref="T:XLib.XEffects.AttributeTriggerAttribute" />
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerHealth.#ctor(System.Single,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AttributeTriggerAttribute" /> class.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="weight">The weight.</param>
            <param name="stat">The stat.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerHealth.Chance(Vintagestory.API.Datastructures.SyncedTreeAttribute)">
            <summary>
            Calculates the chance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.AttributeTriggerHunger">
            <summary>
            
            </summary>
            <seealso cref="T:XLib.XEffects.AttributeTriggerAttribute" />
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerHunger.#ctor(System.Single,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AttributeTriggerAttribute" /> class.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="weight">The weight.</param>
            <param name="stat">The stat.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerHunger.Chance(Vintagestory.API.Datastructures.SyncedTreeAttribute)">
            <summary>
            Calculates the chance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.AttributeTriggerNutrition">
            <summary>
            
            </summary>
            <seealso cref="T:XLib.XEffects.AttributeTriggerAttribute" />
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerNutrition.#ctor(System.Single,System.Single,System.Single,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AttributeTriggerAttribute" /> class.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="weight">The weight.</param>
            <param name="stat">The stat.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerNutrition.Chance(Vintagestory.API.Datastructures.SyncedTreeAttribute)">
            <summary>
            Calculates the chance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.AttributeTriggerFoodLevel">
            <summary>
            
            </summary>
            <seealso cref="T:XLib.XEffects.AttributeTriggerAttribute" />
        </member>
        <member name="P:XLib.XEffects.AttributeTriggerFoodLevel.Food">
            <summary>
            Gets or sets the food.
            </summary>
            <value>
            The food.
            </value>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerFoodLevel.#ctor(System.Single,System.Single,System.Single,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.AttributeTriggerAttribute" /> class.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="weight">The weight.</param>
            <param name="stat">The stat.</param>
            <param name="food">The food.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
        </member>
        <member name="M:XLib.XEffects.AttributeTriggerFoodLevel.Chance(Vintagestory.API.Datastructures.SyncedTreeAttribute)">
            <summary>
            Calculates the chance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.AttributeTrigger">
            <summary>
            Represents an effect trigger that is triggered from attribute values
            </summary>
            <seealso cref="T:XLib.XEffects.EffectTrigger" />
        </member>
        <member name="P:XLib.XEffects.AttributeTrigger.RecoveryThreshold">
            <summary>
            If the trigger chance exceeds this threshold 
            it will block the recovery of the effect.
            </summary>
        </member>
        <member name="F:XLib.XEffects.AttributeTrigger.weights">
            <summary>
            The triggers
            </summary>
        </member>
        <member name="M:XLib.XEffects.AttributeTrigger.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.DamageTrigger" /> class.
            </summary>
            <param name="toTrigger">To trigger.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if toTrigger is null.</exception>
        </member>
        <member name="M:XLib.XEffects.AttributeTrigger.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates a damage trigger from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.AttributeTrigger.GetChance(Vintagestory.API.Common.Entities.Entity,System.Single,System.Single)">
            <summary>
            Gets the chance.
            </summary>
            <param name="destination">The destination.</param>
            <param name="chanceMultiplier">The chance multiplier.</param>
            <param name="power">The power used to calculate the chance.
            Can be used to simulate multiple chance calculations at once.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.AttributeTrigger.ShouldTrigger(Vintagestory.API.Common.Entities.Entity,System.Single,System.Single)">
            <summary>
            Checks whether this trigger should be triggered.
            </summary>
            <param name="destination">The destination.</param>
            <param name="chanceMultiplier">The chance multiplier.</param>
            <param name="power">The power used to calculate the chance.
            Can be used to simulate multiple chance calculations at once.</param>
            <returns></returns>
        </member>
        <member name="T:XLib.XEffects.DamageTrigger">
            <summary>
            Represents an effect trigger that is triggered from incoming damage
            </summary>
            <seealso cref="T:XLib.XEffects.EffectTrigger" />
        </member>
        <member name="P:XLib.XEffects.DamageTrigger.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
            <value>
            The threshold.
            </value>
        </member>
        <member name="P:XLib.XEffects.DamageTrigger.MaxThreshold">
            <summary>
            Gets or sets the maximum threshold.
            </summary>
            <value>
            The maximum threshold.
            </value>
        </member>
        <member name="P:XLib.XEffects.DamageTrigger.Source">
            <summary>
            Gets or sets the type of the damage source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:XLib.XEffects.DamageTrigger.DamageWeight">
            <summary>
            Gets or sets the damage factor.
            </summary>
            <value>
            The damage factor.
            </value>
        </member>
        <member name="P:XLib.XEffects.DamageTrigger.DamageIntensity">
            <summary>
            Gets or sets the damage intensity weight.
            </summary>
            <value>
            The damage intensity weight.
            </value>
        </member>
        <member name="M:XLib.XEffects.DamageTrigger.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.DamageTrigger" /> class.
            </summary>
            <param name="toTrigger">To trigger.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if toTrigger is null.</exception>
        </member>
        <member name="M:XLib.XEffects.DamageTrigger.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates a damage trigger from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.DamageTrigger.GetChance(Vintagestory.API.Common.DamageSource,Vintagestory.API.Common.Entities.Entity,System.Single)">
            <summary>
            Gets the chance.
            </summary>
            <param name="damageSource">The damage source.</param>
            <param name="destination">The destination.</param>
            <param name="damage">The damage.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.DamageTrigger.ShouldTrigger(Vintagestory.API.Common.DamageSource,Vintagestory.API.Common.Entities.Entity,System.Single)">
            <summary>
            Checks whether this trigger should be triggered.
            </summary>
            <param name="damageSource">The damage source.</param>
            <param name="destination">The destination entity.</param>
            <param name="damage">The damage.</param>
            <returns>
            true if the effect should trigger; otherwise, false
            </returns>
        </member>
        <member name="T:XLib.XEffects.EffectTrigger">
            <summary>
            Represents an effect trigger
            </summary>
        </member>
        <member name="P:XLib.XEffects.EffectTrigger.ToTrigger">
            <summary>
            Returns the effect that this trigger should trigger.
            </summary>
            <value>
            To trigger.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectTrigger.Chance">
            <summary>
            Gets or sets the base chance.
            </summary>
            <value>
            The chance.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectTrigger.MinIntensity">
            <summary>
            Gets or sets the base intensity.
            </summary>
            <value>
            The intensity.
            </value>
        </member>
        <member name="P:XLib.XEffects.EffectTrigger.MaxIntensity">
            <summary>
            Gets or sets the maximum intensity.
            </summary>
            <value>
            The intensity.
            </value>
        </member>
        <member name="M:XLib.XEffects.EffectTrigger.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.EffectTrigger" /> class.
            </summary>
            <param name="toTrigger">To trigger.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if toTrigger is null.</exception>
        </member>
        <member name="M:XLib.XEffects.EffectTrigger.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an effect trigger from an attribute tree.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:XLib.XEffects.EffectTrigger.ScaledIntensity(System.Single)">
            <summary>
            Scales the intensity between min and max intensity.
            </summary>
            <param name="scale">The scale.</param>
            <returns name="scale">the Intensity scaled between min and max intensity</returns>
        </member>
        <member name="T:XLib.XEffects.EntityTrigger">
            <summary>
            Represents an effect trigger that is triggered from entity damage
            </summary>
            <seealso cref="T:XLib.XEffects.DamageTrigger" />
        </member>
        <member name="P:XLib.XEffects.EntityTrigger.AllowProjectiles">
            <summary>
            Gets or sets whether projectiles can trigger the effect.
            </summary>
            <value>
            Whether projectiles can trigger the effect.
            </value>
        </member>
        <member name="M:XLib.XEffects.EntityTrigger.#ctor(XLib.XEffects.EffectType)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.EntityTrigger" /> class.
            </summary>
            <param name="toTrigger">To trigger.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if toTrigger is null.</exception>
        </member>
        <member name="M:XLib.XEffects.EntityTrigger.FromTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Creates an entity trigger from an attribute tree.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:XLib.XEffects.EntityTrigger.ShouldTrigger(Vintagestory.API.Common.DamageSource,Vintagestory.API.Common.Entities.Entity,System.Single)">
            <summary>
            Checks whether this trigger should be triggered.
            </summary>
            <param name="damageSource">The damage source.</param>
            <param name="destination">The destination entity.</param>
            <param name="damage">The damage.</param>
            <returns>
            true if the effect should trigger; otherwise, false
            </returns>
        </member>
        <member name="T:XLib.XEffects.InfectiousEntityBehavior">
            <summary>
            The entity can cause effects when attacking other entities.
            </summary>
            <seealso cref="T:Vintagestory.API.Common.Entities.EntityBehavior" />
        </member>
        <member name="M:XLib.XEffects.InfectiousEntityBehavior.PropertyName">
            <summary>
            The name of the property tied to this entity behavior.
            </summary>
            <returns></returns>
        </member>
        <member name="F:XLib.XEffects.InfectiousEntityBehavior.system">
            <summary>
            The effects system
            </summary>
        </member>
        <member name="P:XLib.XEffects.InfectiousEntityBehavior.Triggers">
            <summary>
            The triggers
            </summary>
        </member>
        <member name="M:XLib.XEffects.InfectiousEntityBehavior.#ctor(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.InfectiousEntityBehavior"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:XLib.XEffects.InfectiousEntityBehavior.Initialize(Vintagestory.API.Common.Entities.EntityProperties,Vintagestory.API.Datastructures.JsonObject)">
            <summary>
            Initializes the entity behavior.
            </summary>
            <param name="properties">The properties of this entity.</param>
            <param name="attributes">The attributes of this entity.</param>
        </member>
        <member name="T:XLib.XEffects.XEffectsConfig">
            <summary>
            Configuration class for XEffects.
            </summary>
        </member>
        <member name="F:XLib.XEffects.XEffectsConfig.effectInterval">
            <summary>
            the interval in which effects are checked
            </summary>
        </member>
        <member name="F:XLib.XEffects.XEffectsConfig.tiggerInterval">
            <summary>
            the interval in which effect triggers are checked
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.XEffectsConfig"/> class.
            </summary>
        </member>
        <member name="T:XLib.XEffects.XEffectsHelper">
            <summary>
            XEffects helper class
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsHelper.AddEffect(Vintagestory.API.Common.Entities.Entity,XLib.XEffects.Effect)">
            <summary>
            Adds the given effect to the given entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="T:XLib.XEffects.XEffectsSystem">
            <summary>
            The main interface for the effect system.
            </summary>
            <seealso cref="T:Vintagestory.API.Common.ModSystem" />
        </member>
        <member name="P:XLib.XEffects.XEffectsSystem.EffectsAssetCategory">
            <summary>
            the asset category
            </summary>
        </member>
        <member name="P:XLib.XEffects.XEffectsSystem.EffectTriggerAssetCategory">
            <summary>
            the asset category
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.ExecuteOrder">
            <summary>
            If you need mods to be executed in a certain order, adjust this methods return value.
            The server will call each Mods Start() method the ascending order of each mods execute order value. And thus, as long as every mod registers it's event handlers in the Start() method, all event handlers will be called in the same execution order.
            Default execute order of some survival mod parts
            Worldgen:
            - GenTerra: 0
            - RockStrata: 0.1
            - Deposits: 0.2
            - Caves: 0.3
            - Blocklayers: 0.4
            Asset Loading
            - Json Overrides loader: 0.05
            - Load hardcoded mantle block: 0.1
            - Block and Item Loader: 0.2
            - Recipes (Smithing, Knapping, Clayforming, Grid recipes, Alloys) Loader: 1
            </summary>
            <returns></returns>
        </member>
        <member name="P:XLib.XEffects.XEffectsSystem.Config">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="P:XLib.XEffects.XEffectsSystem.Harmony">
            <summary>
            The harmony api
            </summary>
        </member>
        <member name="P:XLib.XEffects.XEffectsSystem.Api">
            <summary>
            The vs core API
            </summary>
        </member>
        <member name="P:XLib.XEffects.XEffectsSystem.EffectTypes">
            <summary>
            Gets the effect types.
            </summary>
            <value>
            The effect types.
            </value>
        </member>
        <member name="P:XLib.XEffects.XEffectsSystem.Trigger">
            <summary>
            Gets the trigger.
            </summary>
            <value>
            The trigger.
            </value>
        </member>
        <member name="P:XLib.XEffects.XEffectsSystem.EntityTrigger">
            <summary>
            Gets the entity trigger.
            </summary>
            <value>
            The trigger.
            </value>
        </member>
        <member name="F:XLib.XEffects.XEffectsSystem.effectFrame">
            <summary>
            The effect frame
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.DoHarmonyPatch(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Applies the harmony patches.
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XEffects.XEffectsSystem"/> class.
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.StartPre(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called during initial mod loading, called before any mod receives the call to Start()
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.Start(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Side agnostic Start method, called after all mods received a call to StartPre().
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.StartServerSide(Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
            Minor convenience method to save yourself the check for/cast to ICoreServerAPI in Start()
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.LoadConfig">
            <summary>
            Loads the configuration from a file.
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.Dispose">
            <summary>
            Unpatches harmony patches.
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.AssetsLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called on the server or the client; implementing code may need to check which side it is.
            <br />On a server, called only after all mods have called Start(), and after asset JSONs have been read from disk and patched, but before runphase ModsAndConfigReady.
            <br />Asset files are now available to load using api.Assets.TryGet() calls or similar.  It is not guaranteed that the actual in-game assets (including blocks and items) are yet registered!
            <br />If called from a modsystem, what has been registered at this stage depends on the ExecuteOrder().  After 0.2, blocks and items have been registered.  After 0.6, recipes have been registered.
            <br />If implementing this, and if your code requires that blocks, items and entities have been registered first, make sure your ModSystem has set an appropriate ExecuteOrder()!!
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.OnPlayerJoined(Vintagestory.API.Server.IServerPlayer)">
            <summary>
            Called when a player joined.
            </summary>
            <param name="byPlayer">The by player.</param>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.StartClientSide(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Minor convenience method to save yourself the check for/cast to ICoreClientAPI in Start()
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.RegisterEffectType(XLib.XEffects.EffectType)">
            <summary>
            Registers a effect type.
            </summary>
            <param name="effectType">The effect type.</param>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.EffectType(System.String)">
            <summary>
            Gets an effect type by its name.
            </summary>
            <param name="name">The name.</param>
            <returns>a effects type by its name</returns>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.CreateEffect(System.String)">
            <summary>
            Creates an effect.
            </summary>
            <param name="name">The name of the effect type.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.RegisterDefaults">
            <summary>
            Registers the default effect types.
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.FindTrigger(XLib.XEffects.EffectType,System.String)">
            <summary>
            Finds a trigger that triggers a specific effect type.
            </summary>
            <param name="effectType">The effect type.</param>
            <param name="type">The name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.LoadJsonEffects">
            <summary>
            Loads the json effects.
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.OnGameWorldSave">
            <summary>
            Called when the game world was saved.
            </summary>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.OnHotKeyEffectFrame(Vintagestory.API.Client.KeyCombination)">
            <summary>
            Called when effect frame hot key was pressed.
            </summary>
            <param name="comb">The comb.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.OnClearEffectCommand(Vintagestory.API.Common.TextCommandCallingArgs)">
            <summary>
            Called when the clear effect command was called.
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.OnAddEffectCommand(Vintagestory.API.Common.TextCommandCallingArgs)">
            <summary>
            Called when the add effect command was called.
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:XLib.XEffects.XEffectsSystem.OnRemoveEffectCommand(Vintagestory.API.Common.TextCommandCallingArgs)">
            <summary>
            Called when the add effect command was called.
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:XLib.XLeveling.Config">
            <summary>
            The xleveling config.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.Config.unlearnCooldown">
            <summary>
            The unlearn cooldown
            </summary>
        </member>
        <member name="F:XLib.XLeveling.Config.pointsForUnlearn">
            <summary>
            The number of unlearn points you need to unleran an ability
            </summary>
        </member>
        <member name="F:XLib.XLeveling.Config.expLossOnDeath">
            <summary>
            The experience loss on death
            Numbers smaller than or equal to 1.0 means a percentage of the earned experience.
            Numbers greater than 1.0 means a percentage of total needed experience for the next level up.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.Config.expLossCooldown">
            <summary>
            The exp loss cooldown on death 
            </summary>
        </member>
        <member name="F:XLib.XLeveling.Config.specialisationLimit">
            <summary>
            The maximal number of specialisations one player can choose
            </summary>
        </member>
        <member name="F:XLib.XLeveling.Config.expMult">
            <summary>
            The experience multiplier
            </summary>
        </member>
        <member name="F:XLib.XLeveling.Config.mergeQualities">
            <summary>
            A value indicating if items with different qualities should be merged
            Quality is a feature of xskills. But I put it here so I don't have a
            seperate config file for it.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.Config.disabledRequirements">
            <summary>
            Can be used to disable specific requirements.
            Primarily used to disable class requirements.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.Config.trackExpGain">
            <summary>
            A value indicating if a chat message should be send if the player got experience
            </summary>
        </member>
        <member name="M:XLib.XLeveling.Config.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.Config"/> class.
            </summary>
        </member>
        <member name="T:XLib.XLeveling.AbilityButton">
            <summary>
            Represents a button for a player ability and allows to increase or decrease the tier of an ability.
            The button will manipulate the tier of the given ability when it is clicked.
            </summary>
            <seealso cref="T:Vintagestory.API.Client.GuiElementTextButton" />
        </member>
        <member name="P:XLib.XLeveling.AbilityButton.CursorHovers">
            <summary>
            Is true when the cursor hovers over the button
            </summary>
        </member>
        <member name="P:XLib.XLeveling.AbilityButton.Tooltip">
            <summary>
            The ability tooltip hud that should be updated when the cursor hovers over this button.
            So it can show the informations for the ability the cursor hovers over.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.AbilityButton.PlayerAbility">
            <summary>
            The player ability that this button represents.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.AbilityButton.SkillDialog">
            <summary>
            Gets the skill dialog.
            </summary>
            <value>
            The skill dialog.
            </value>
        </member>
        <member name="M:XLib.XLeveling.AbilityButton.#ctor(XLib.XLeveling.SkillDialog,Vintagestory.API.Client.ElementBounds,XLib.XLeveling.AbilityTooltip,XLib.XLeveling.PlayerAbility)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.AbilityButton" /> class.
            </summary>
            <param name="skillDialog">The parent skill dialog.</param>
            <param name="bounds">The bounds of this button.</param>
            <param name="tooltipDest">The destination hud for the player ability informations.</param>
            <param name="playerAbility">The player ability that this button represents.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if skillDialog, tooltipDest or playerAbility is null.</exception>
        </member>
        <member name="M:XLib.XLeveling.AbilityButton.OnMouseMove(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            Checks if the cursor hovers over this button.
            </summary>
            <param name="api">The vintage story core client api.</param>
            <param name="args">The mouse event data.</param>
        </member>
        <member name="M:XLib.XLeveling.AbilityButton.OnMouseDownOnElement(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            Called when this button was clicked on.
            </summary>
            <param name="api">The API.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:XLib.XLeveling.AbilityTooltip">
            <summary>
            Shows informations of an ability.
            </summary>
            <seealso cref="T:Vintagestory.API.Client.HudElement" />
        </member>
        <member name="F:XLib.XLeveling.AbilityTooltip.abilityNameText">
            <summary>
            The gui text element that shows the name of the ability.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.AbilityTooltip.abilityInfoText">
            <summary>
            The gui text element that shows the informations of the ability.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.AbilityTooltip.SkillDialog">
            <summary>
            Gets or sets the skill dialog.
            </summary>
            <value>
            The skill dialog.
            </value>
        </member>
        <member name="M:XLib.XLeveling.AbilityTooltip.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.AbilityTooltip"/> class.
            </summary>
            <param name="capi">The vintage story core client api.</param>
            <param name="parentBounds">The parent bounds. Used to bound this hud to a dialog.</param>
        </member>
        <member name="M:XLib.XLeveling.AbilityTooltip.Update(XLib.XLeveling.PlayerAbility)">
            <summary>
            Updates this hud to provide informations of the specified player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
        </member>
        <member name="T:XLib.XLeveling.SkillDialog">
            <summary>
            Represents the dialog that holds all information for the 
            different skills and the associated abilities. Also Provides 
            an interface to choose and improve abilities.
            </summary>
            <seealso cref="T:Vintagestory.API.Client.GuiDialog" />
        </member>
        <member name="P:XLib.XLeveling.SkillDialog.Client">
            <summary>
            The XLeveling client this dialog belongs to.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.SkillDialog.Width">
            <summary>
            The calculated width of this dialog.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.SkillDialog.Unlearn">
            <summary>
            True if clicking on an ability button should decrease the tier of the ability.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.SkillDialog.UnlearnAbility">
            <summary>
            True if clicking on an ability button should reset the tier of an ability.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillDialog.groupBar">
            <summary>
            The horizontal tabs to choose a skill group.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillDialog.skillBar">
            <summary>
            The horizontal tabs to choose a skill.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillDialog.skillinfo">
            <summary>
            This text field contains information about the currently chosen skill.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillDialog.abilityTooltip">
            <summary>
            A hud element that shows the ability tooltip.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillDialog.unlearnToggle">
            <summary>
            The unlearn toggle button
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillDialog.unlearnAbilityToggle">
            <summary>
            The unlearn ability toggle button
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillDialog.sparringToggle">
            <summary>
            The sparring toggle button
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillDialog.groups">
            <summary>
            The skill groups.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.#ctor(XLib.XLeveling.XLevelingClient)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SkillDialog"/> class.
            </summary>
            <param name="client">The XLeveling client this dialog belongs to.</param>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.CreateGroups">
            <summary>
            Creates the groups for the groups tab bar.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.Setup">
            <summary>
            Setups all gui elements of this dialog. This method is called every time a new tab was clicked to create the new buttons.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.OnTitleBarCloseClicked">
            <summary>
            Called when the close button on the title bar was clicked.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.OnGroupTabClicked(System.Int32)">
            <summary>
            Called when a skill group tab was clicked.
            </summary>
            <param name="clicked">The clicked tab.</param>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.OnSkillTabClicked(System.Int32)">
            <summary>
            Called when a skill tab was clicked.
            </summary>
            <param name="clicked">The clicked tab.</param>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.OnOpen">
            <summary>
            Called every time this dialog opens.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.OnClose">
            <summary>
            Called every time this dialog closes.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.TryOpen">
            <summary>
            Attempts to open this dialogue.
            </summary>
            <returns>
            Was this dialogue successfully opened?
            </returns>
        </member>
        <member name="M:XLib.XLeveling.SkillDialog.OnSparringToggle(System.Boolean)">
            <summary>
            Is triggered when the sparring button was pressed.
            </summary>
            <param name="toggle"></param>
        </member>
        <member name="P:XLib.XLeveling.SkillDialog.ToggleKeyCombinationCode">
            <summary>
            The key combination string that toggles this GUI object.
            </summary>
        </member>
        <member name="T:XLib.XLeveling.ItemSkillBook">
            <summary>
            A book that can be used to gain some experience for a specific skill.
            Uses the attributes "skill" and "experience".
            </summary>
        </member>
        <member name="F:XLib.XLeveling.ItemSkillBook.system">
            <summary>
            XLeveling mod system
            </summary>
        </member>
        <member name="M:XLib.XLeveling.ItemSkillBook.OnHeldAttackStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            When the player has begun using this item for attacking (left mouse click).
            Sets the attributes "skill" and "experience" randomly if not set yet.
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
        </member>
        <member name="M:XLib.XLeveling.ItemSkillBook.OnLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Server Side: Called one the collectible has been registered Client Side: Called
            once the collectible has been loaded from server packet
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:XLib.XLeveling.ItemSkillBook.GetHeldItemName(Vintagestory.API.Common.ItemStack)">
            <summary>
            Called by the inventory system when you hover over an item stack. This is the item stack name that is getting displayed.
            </summary>
            <param name="itemStack"></param>
            <returns></returns>
        </member>
        <member name="M:XLib.XLeveling.ItemSkillBook.GetHeldItemInfo(Vintagestory.API.Common.ItemSlot,System.Text.StringBuilder,Vintagestory.API.Common.IWorldAccessor,System.Boolean)">
            <summary>
            Called by the inventory system when you hover over an item stack. This is the text that is getting displayed.
            </summary>
            <param name="inSlot"></param>
            <param name="dsc"></param>
            <param name="world"></param>
            <param name="withDebugInfo"></param>
        </member>
        <member name="M:XLib.XLeveling.ItemSkillBook.OnHeldInteractStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,System.Boolean,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            Called when the player right clicks while holding this block/item in his hands
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="firstEvent">
            True when the player pressed the right mouse button on this block. 
            Every subsequent call, while the player holds right mouse down will be false, 
            it gets called every second while right mouse is down</param>
            <param name="handling">Whether or not to do any subsequent actions. If not set or set to NotHandled, the action will not called on the server.</param>
        </member>
        <member name="M:XLib.XLeveling.ItemSkillBook.OnHeldInteractStep(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called every frame while the player is using this collectible. Return false to stop the interaction.
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns>False if the interaction should be stopped. True if the interaction should continue</returns>
        </member>
        <member name="M:XLib.XLeveling.ItemSkillBook.OnHeldInteractStop(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called when the player successfully completed the using action, always called once an interaction is over.
            Consumes the book and grants the player the experience.
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
        </member>
        <member name="T:XLib.XLeveling.PlayerSkillPackage">
            <summary>
            Represents a player skill package that is send by the server to the player.
            This package will be send to every player for every skill when the player joins the server.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.PlayerSkillPackage.skillId">
            <summary>
            The skill identifier
            </summary>
        </member>
        <member name="F:XLib.XLeveling.PlayerSkillPackage.level">
            <summary>
            The current level of the skill.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.PlayerSkillPackage.experience">
            <summary>
            The current experience of the skill.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillPackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.PlayerSkillPackage"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillPackage.#ctor(XLib.XLeveling.PlayerSkill)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.PlayerSkillPackage" /> class from a skill.
            </summary>
            <param name="skill">The skill.</param>
        </member>
        <member name="T:XLib.XLeveling.ExperiencePackage">
            <summary>
            Represents a player skill experience package that is send by the server to the player when a player gets experience.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.ExperiencePackage.skillId">
            <summary>
            The skill identifier
            </summary>
        </member>
        <member name="F:XLib.XLeveling.ExperiencePackage.experience">
            <summary>
            The experience
            </summary>
        </member>
        <member name="M:XLib.XLeveling.ExperiencePackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ExperiencePackage"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.ExperiencePackage.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ExperiencePackage"/> class.
            </summary>
            <param name="skillId">The skill identifier.</param>
            <param name="experience">The experience.</param>
        </member>
        <member name="T:XLib.XLeveling.PlayerAbilityPackage">
            <summary>
            Represents a player ability package.
            A client sends this package when a player increases the tier of an ability
            A server sends this package to every player for every ability when the player joins the server.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.PlayerAbilityPackage.abilityId">
            <summary>
            The ability identifier of the ability
            </summary>
        </member>
        <member name="F:XLib.XLeveling.PlayerAbilityPackage.skillId">
            <summary>
            The skill identifier
            </summary>
        </member>
        <member name="F:XLib.XLeveling.PlayerAbilityPackage.skilledTier">
            <summary>
            The skilled tier
            </summary>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbilityPackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.PlayerAbilityPackage"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbilityPackage.#ctor(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.PlayerAbilityPackage" /> class from an ability.
            </summary>
            <param name="ability">The ability.</param>
            <param name="skilledTier">The skilled tier.</param>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbilityPackage.#ctor(XLib.XLeveling.PlayerAbility)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.PlayerAbilityPackage"/> class.
            </summary>
            <param name="ability">The ability.</param>
        </member>
        <member name="T:XLib.XLeveling.KnowledgePackage">
            <summary>
            Represents a knowledge package.
            A server sends this package to players who receive knowledge.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.KnowledgePackage.name">
            <summary>
            The name of the knowledge
            </summary>
        </member>
        <member name="F:XLib.XLeveling.KnowledgePackage.level">
            <summary>
            The level of the knowledge
            </summary>
        </member>
        <member name="M:XLib.XLeveling.KnowledgePackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.KnowledgePackage" /> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.KnowledgePackage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.KnowledgePackage"/> class.
            </summary>
            <param name="name">The knowledge name.</param>
            <param name="level">The knowledge level.</param>
        </member>
        <member name="T:XLib.XLeveling.EnumXLevelingCommand">
            <summary>
            A command for the CommandPackage
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumXLevelingCommand.None">
            <summary>
            No command
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumXLevelingCommand.Reset">
            <summary>
            Reset command
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumXLevelingCommand.UnlearnPoints">
            <summary>
            Unlearn points
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumXLevelingCommand.UnlearnReadyTime">
            <summary>
            Unlearn ready time
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumXLevelingCommand.SparringMode">
            <summary>
            Sparring mode
            </summary>
        </member>
        <member name="T:XLib.XLeveling.CommandPackage">
            <summary>
            Represents a command.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.CommandPackage.command">
            <summary>
            The command
            </summary>
        </member>
        <member name="F:XLib.XLeveling.CommandPackage.value">
            <summary>
            A integer value for the command
            </summary>
        </member>
        <member name="F:XLib.XLeveling.CommandPackage.dValue">
            <summary>
            A double value for the command
            </summary>
        </member>
        <member name="M:XLib.XLeveling.CommandPackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.CommandPackage"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.CommandPackage.#ctor(XLib.XLeveling.EnumXLevelingCommand,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.CommandPackage"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:XLib.XLeveling.CommandPackage.#ctor(XLib.XLeveling.EnumXLevelingCommand,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.CommandPackage"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:XLib.XLeveling.AbilityRequirement">
            <summary>
            Represents an ability tier from an another ability that must be reached to learn an ability.
            </summary>
            <seealso cref="T:XLib.XLeveling.Requirement" />
        </member>
        <member name="P:XLib.XLeveling.AbilityRequirement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.AbilityRequirement.Ability">
            <summary>
            Gets the required ability.
            </summary>
            <value>
            The ability.
            </value>
        </member>
        <member name="P:XLib.XLeveling.AbilityRequirement.RequiredTier">
            <summary>
            Gets the required tier.
            </summary>
            <value>
            The required tier.
            </value>
        </member>
        <member name="M:XLib.XLeveling.AbilityRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.AbilityRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.AbilityRequirement.#ctor(XLib.XLeveling.Ability,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.AbilityRequirement" /> class.
            </summary>
            <param name="ability">The ability.</param>
            <param name="requiredTier">The required tier.</param>
            <param name="minimumTier">The minimum tier this requirement is required for.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if ability is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.AbilityRequirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.AbilityRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.AbilityRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              false, if this conflict has been ignored; true, if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.AbilityRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.AbilityRequirement.RequirementType">
            <summary>
            The Type of the requirement.
            </summary>
            <returns>
              the Type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.AndRequirement">
            <summary>
            Represents two or more requirements that must be met at the same time.
            Note that you don`t need this requirement in the top level requirements because they are already all needed.
            But you can use it as a sub requirement in an <see cref="T:XLib.XLeveling.OrRequirement" />.
            </summary>
            <seealso cref="T:XLib.XLeveling.Requirement" />
        </member>
        <member name="P:XLib.XLeveling.AndRequirement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.AndRequirement.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>
            The requirements.
            </value>
        </member>
        <member name="M:XLib.XLeveling.AndRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.AndRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.AndRequirement.#ctor(XLib.XLeveling.Requirement[])">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.AndRequirement"/> class.
            </summary>
            <param name="requirements">The requirements.</param>
        </member>
        <member name="M:XLib.XLeveling.AndRequirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.AndRequirement.AddRequirement(XLib.XLeveling.Requirement)">
            <summary>
            Adds a requirement.
            </summary>
            <param name="requirement">The requirement.</param>
        </member>
        <member name="M:XLib.XLeveling.AndRequirement.RemoveRequirement(XLib.XLeveling.Requirement)">
            <summary>
            Removes a requirement.
            </summary>
            <param name="requirement">The requirement.</param>
            <returns>
              <c>true</c> if the specified requirement was successfully removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.AndRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.AndRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            Should return false if this conflict should be ignored and true if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.AndRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.AndRequirement.RequirementType">
            <summary>
            The Type of the requirement.
            </summary>
            <returns>
            the Type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.ClassRequirement">
            <summary>
             Represents a specific character class that a player must have to learn an ability.
            </summary>
            <seealso cref="T:XLib.XLeveling.Requirement" />
        </member>
        <member name="P:XLib.XLeveling.ClassRequirement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.ClassRequirement.Classes">
            <summary>
            Gets or sets the classes.
            </summary>
            <value>
            The classes.
            </value>
        </member>
        <member name="M:XLib.XLeveling.ClassRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ClassRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.ClassRequirement.#ctor(System.String[],System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ClassRequirement" /> class.
            </summary>
            <param name="classes">The classes.</param>
            <param name="minimumTier">The minimum tier this requirement is required for.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if classes is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.ClassRequirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.ClassRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.ClassRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              false, if this conflict has been ignored; true, if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.ClassRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.ClassRequirement.RequirementType">
            <summary>
            The Type of the requirement.
            </summary>
            <returns>
              the Type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.DaytimeRequirement">
            <summary>
            Represents a time restriction of learning the ability.
            </summary>
            <seealso cref="T:XLib.XLeveling.Requirement" />
        </member>
        <member name="P:XLib.XLeveling.DaytimeRequirement.Name">
            <summary>
            Names this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:XLib.XLeveling.DaytimeRequirement.After">
            <summary>
            Gets or sets the earliest time.
            </summary>
            <value>
            The after.
            </value>
        </member>
        <member name="P:XLib.XLeveling.DaytimeRequirement.Before">
            <summary>
            Gets or sets latest time.
            </summary>
            <value>
            The before.
            </value>
        </member>
        <member name="M:XLib.XLeveling.DaytimeRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.DaytimeRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.DaytimeRequirement.#ctor(System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.DaytimeRequirement" /> class.
            </summary>
            <param name="after">The earliest time. Should be a value between 0.0 and 1.0.</param>
            <param name="before">The latest time. Should be a value between 0.0 and 1.0.</param>
            <param name="minimumTier">The minimum tier this requirement is required for.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
        </member>
        <member name="M:XLib.XLeveling.DaytimeRequirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.DaytimeRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.DaytimeRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              false, if this conflict has been ignored; true, if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.DaytimeRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player skill set.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            a Description that describes the requirement for the given player skill set.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.DaytimeRequirement.RequirementType">
            <summary>
            The Type of the requirement.
            </summary>
            <returns>
              the Type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.ExclusiveAbilityRequirement">
            <summary>
            Represents an ability that can't be learned simultaneously with another ability.
            You must add this to both abilities to achieve mutually exclusivity.
            </summary>
            <seealso cref="T:XLib.XLeveling.Requirement" />
        </member>
        <member name="P:XLib.XLeveling.ExclusiveAbilityRequirement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.ExclusiveAbilityRequirement.Ability">
            <summary>
            Gets the exclusive ability.
            </summary>
            <value>
            The ability.
            </value>
        </member>
        <member name="P:XLib.XLeveling.ExclusiveAbilityRequirement.ExclusiveTier">
            <summary>
            Gets the tier of the ability that is exclusive to this ability tier.
            </summary>
            <value>
            The minimum tier.
            </value>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.#ctor(XLib.XLeveling.Ability,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement" /> class.
            </summary>
            <param name="ability">The ability.</param>
            <param name="minimumTier">The minimum tier.</param>
            <param name="exclusiveTier">The exclusive tier.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if ability is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.#ctor(XLib.XLeveling.Ability,XLib.XLeveling.Ability,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement"/> class and adds this as a requirement to it.
            Creates a secound instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement"/> class that is added as a requirement to the ability2.
            Creates two mutually excluding abilities.
            </summary>
            <param name="ability1">The first ability.</param>
            <param name="ability2">The second ability.</param>
            <param name="minimumTier1">The minimum tier1.</param>
            <param name="minimumTier2">The minimum tier2.</param>
            <param name="exclusiveTier1">The exclusive tier1.</param>
            <param name="exclusiveTier2">The exclusive tier2.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if ability1 or ability2 is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.#ctor(XLib.XLeveling.Ability,XLib.XLeveling.Ability,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement"/> class and adds this as a requirement to it.
            Creates a secound instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement"/> class that is added as a requirement to the ability2.
            Creates two mutually excluding abilities.
            </summary>
            <param name="ability1">The ability1.</param>
            <param name="ability2">The ability2.</param>
            <param name="minimumTier1">The minimum tier1.</param>
            <param name="minimumTier2">The minimum tier2.</param>
            <param name="exclusiveTier">The exclusive tier.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if ability1 or ability2 is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.#ctor(XLib.XLeveling.Ability,XLib.XLeveling.Ability,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement"/> class and adds this as a requirement to it.
            Creates a secound instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement"/> class that is added as a requirement to the ability2.
            Creates two mutually excluding abilities.
            </summary>
            <param name="ability1">The ability1.</param>
            <param name="ability2">The ability2.</param>
            <param name="minimumTier">The minimum tier.</param>
            <param name="exclusiveTier">The exclusive tier.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if ability1 or ability2 is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.#ctor(XLib.XLeveling.Ability,XLib.XLeveling.Ability,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement"/> class and adds this as a requirement to it.
            Creates a secound instance of the <see cref="T:XLib.XLeveling.ExclusiveAbilityRequirement"/> class that is added as a requirement to the ability2.
            Creates two mutually excluding abilities.
            </summary>
            <param name="ability1">The ability1.</param>
            <param name="ability2">The ability2.</param>
            <param name="exclusiveMinimumTier">The minimum and exclusive tier.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if ability1 or ability2 is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              false, if this conflict has been ignored; true, if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.ExclusiveAbilityRequirement.RequirementType">
            <summary>
            The Type of the requirement.
            </summary>
            <returns>
              the Type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.KnowledgeRequirement">
            <summary>
            Represents a specific knowledge level that must be acquired to learn an ability.
            </summary>
            <seealso cref="T:XLib.XLeveling.Requirement" />
        </member>
        <member name="P:XLib.XLeveling.KnowledgeRequirement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.KnowledgeRequirement.KnowledgeName">
            <summary>
            Gets or sets the name of the knowledge that is required.
            </summary>
            <value>
            The name of the knowledge.
            </value>
        </member>
        <member name="P:XLib.XLeveling.KnowledgeRequirement.KnowledgeLevel">
            <summary>
            Gets or sets the knowledge level that is required.
            </summary>
            <value>
            The knowledge level.
            </value>
        </member>
        <member name="M:XLib.XLeveling.KnowledgeRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.KnowledgeRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.KnowledgeRequirement.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.KnowledgeRequirement"/> class.
            </summary>
            <param name="knowledgeName">Name of the knowledge.</param>
            <param name="knowledgeLevel">The required knowledge level.</param>
        </member>
        <member name="M:XLib.XLeveling.KnowledgeRequirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.KnowledgeRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.KnowledgeRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            Should return false if this conflict should be ignored and true if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.KnowledgeRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.KnowledgeRequirement.RequirementType">
            <summary>
            The type of the requirement.
            </summary>
            <returns>
            the type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.LimitationRequirement">
            <summary>
            Skills with this requirement are limited.
            Limits the amount of skills of a specific set.
            </summary>
            <seealso cref="T:XLib.XLeveling.Requirement" />
        </member>
        <member name="F:XLib.XLeveling.LimitationRequirement.abilities">
            <summary>
            A list of all abilities that are affected by this requirement.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.LimitationRequirement.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:XLib.XLeveling.LimitationRequirement.Name">
            <summary>
            Gets or sets the name of this limitation.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.LimitationRequirement.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <value>
            The limit.
            </value>
        </member>
        <member name="P:XLib.XLeveling.LimitationRequirement.ModifierAbility">
            <summary>
            Gets or sets the an ability that can modify the limit.
            </summary>
            <value>
            The modifier ability.
            </value>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.LimitationRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.LimitationRequirement" /> class.
            </summary>
            <param name="limit">The limit.</param>
            <param name="name">The name.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.AddAbility(XLib.XLeveling.Ability)">
            <summary>
            Adds a ability to this requirement.
            Also adds this to the requirements of an ability.
            </summary>
            <param name="ability">a ability.</param>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.ContainsAbility(XLib.XLeveling.Ability)">
            <summary>
            Determines whether the specified ability is contained in this requirement.
            </summary>
            <param name="ability">The ability.</param>
            <returns>
              <c>true</c> if the specified ability is contained in this requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.CountAbilities(XLib.XLeveling.PlayerSkillSet)">
            <summary>
            Counts the number of limited abilities the player has learned.
            </summary>
            <param name="skillSet">The player skill set.</param>
            <returns></returns>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            Should return false if this conflict should be ignored and true if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.LimitationRequirement.RequirementType">
            <summary>
            The Type of the requirement.
            </summary>
            <returns>
            the Type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.NotRequirement">
            <summary>
            Inverts a requirement
            </summary>
            <seealso cref="P:XLib.XLeveling.NotRequirement.Requirement" />
        </member>
        <member name="P:XLib.XLeveling.NotRequirement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.NotRequirement.Requirement">
            <summary>
            Gets or sets the inverted requirement.
            </summary>
            <value>
            The requirement.
            </value>
        </member>
        <member name="M:XLib.XLeveling.NotRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.NotRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.NotRequirement.#ctor(XLib.XLeveling.Requirement,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.NotRequirement" /> class.
            </summary>
            <param name="requirement">The requirement.</param>
            <param name="minimumTier">The minimum tier.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if requirement is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.NotRequirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.NotRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:XLib.XLeveling.NotRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              false, if this conflict has been ignored; true, if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.NotRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            a Description that describes the requirement for the given player ability.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:XLib.XLeveling.NotRequirement.RequirementType">
            <summary>
            The Type of the requirement.
            </summary>
            <returns>
            the Type of the requirement.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:XLib.XLeveling.OrRequirement">
            <summary>
            Represents two or more requirements of which one must be fulfilled.
            </summary>
            <seealso cref="T:XLib.XLeveling.Requirement" />
        </member>
        <member name="P:XLib.XLeveling.OrRequirement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:XLib.XLeveling.OrRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.OrRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.OrRequirement.#ctor(XLib.XLeveling.Requirement[])">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.OrRequirement"/> class.
            </summary>
            <param name="requirements">The requirements.</param>
        </member>
        <member name="M:XLib.XLeveling.OrRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.OrRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            Should return false if this conflict should be ignored and true if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.OrRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
            a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.OrRequirement.RequirementType">
            <summary>
            The Type of the requirement.
            </summary>
            <returns>
            the Type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.EnumRequirementType">
            <summary>
            Decides how strong a requirement is. Used especially when some requirements are ignored.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumRequirementType.None">
            <summary>
            None specified requirement
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumRequirementType.LevelRequirement">
            <summary>
            This is for the default skill level requirement every ability has by default.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumRequirementType.WeakRequirement">
            <summary>
            Weak requirements. Weak requirements can be violated when loading the game.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumRequirementType.MediumRequirement">
            <summary>
            Medium requirements are checked while abilities are loaded.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumRequirementType.StrongRequirement">
            <summary>
            Strong requirements can never be violated and are never ignored by default.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumRequirementType.WeakMediumRequirements">
            <summary>
            WeakRequirement | MediumRequirement
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumRequirementType.StrongMediumRequirements">
            <summary>
            StrongRequirement | MediumRequirement
            </summary>
        </member>
        <member name="F:XLib.XLeveling.EnumRequirementType.AllRequirements">
            <summary>
            0xff
            </summary>
        </member>
        <member name="T:XLib.XLeveling.Requirement">
            <summary>
            Represents a requirement for an ability that must be fulfilled to increases its tier.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.Requirement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Requirement.HideAbilityUntilFulfilled">
            <summary>
            Gets or sets a value indicating whether the ability is hidden until this requirement is fulfilled.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.Requirement.MinimumTier">
            <summary>
            Gets the minimum tier this requirement is required for.
            </summary>
            <value>
            The minimum tier.
            </value>
        </member>
        <member name="M:XLib.XLeveling.Requirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.Requirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.Requirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Requirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Requirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              Should return false if this conflict should be ignored and true if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Requirement.Description(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Requirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Requirement.RequirementType">
            <summary>
            The type of the requirement.
            </summary>
            <returns>
              the type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.SkillRequirement">
            <summary>
            Represents a skill level that must be reached to learn an ability.
            </summary>
            <seealso cref="T:XLib.XLeveling.Requirement" />
        </member>
        <member name="P:XLib.XLeveling.SkillRequirement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.SkillRequirement.Skill">
            <summary>
            Gets the skill.
            </summary>
            <value>
            The skill.
            </value>
        </member>
        <member name="P:XLib.XLeveling.SkillRequirement.RequiredLevel">
            <summary>
            Gets the required level.
            </summary>
            <value>
            The required level.
            </value>
        </member>
        <member name="M:XLib.XLeveling.SkillRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SkillRequirement"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SkillRequirement.#ctor(XLib.XLeveling.Skill,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SkillRequirement" /> class.
            </summary>
            <param name="skill">The skill.</param>
            <param name="requiredLevel">The required level.</param>
            <param name="minimumTier">The minimum tier this requirement is required for.</param>
            <param name="hideAbilityUntilFulfilled">if set to <c>true</c> the ability is hidden until this requirement is fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown when skill is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.SkillRequirement.FromTree(Vintagestory.API.Datastructures.TreeAttribute,XLib.XLeveling.XLeveling)">
            <summary>
            Creates a requirement from a tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="toResolve">XLeveling object for resolving.</param>
            <returns>
              <c>true</c> if the resolving was successful, the requirement is only added to an ability if this method was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.SkillRequirement.IsFulfilled(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Determines whether the specified player ability fulfills the requirement.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="tier">The tier this requirement is checked for.</param>
            <returns>
              <c>true</c> if the specified player ability fulfills the requirement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.SkillRequirement.ResolveConflict(XLib.XLeveling.PlayerAbility)">
            <summary>
            This function is called when the requirement is not fulfilled after all skills are loaded and should resolve this conflict.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              false, if this conflict has been ignored; true, if the conflict has been resolved.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.SkillRequirement.ShortDescription(XLib.XLeveling.PlayerAbility)">
            <summary>
            Describes the requirement for the given player ability.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              a Description that describes the requirement for the given player ability.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.SkillRequirement.RequirementType">
            <summary>
            The Type of the requirement.
            </summary>
            <returns>
              the Type of the requirement.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.Ability">
            <summary>
            Represents an ability in general.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.Ability.Name">
            <summary>
            Gets the internal name of this ability. Used to save, load and identify this ability.
            This should always be the same and must be unique in its skill.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.DisplayName">
            <summary>
            Gets or sets the name that is displayed in the game.
            Can be localized.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.Description">
            <summary>
            Gets or sets the description of the ability. This can contain placeholders for string interpolation.
            The string interpolation will use the values from the values array.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.Id">
            <summary>
            Gets the internal identifier for this ability. This will be set by the skill this ability belongs to.
            Is used to quickly identify this ability within a skill and is only unique within this ability. 
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.Skill">
            <summary>
            Gets or sets the skill this ability  belongs to.
            </summary>
            <value>
            The skill.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.MinLevel">
            <summary>
            Gets or sets the minimum skill level that is required to learn this ability.
            This does not affect players who are ingame and have already learned this ability.
            Set this value before any player joins the world.
            </summary>
            <value>
            The minimum level.
            </value>
        </member>
        <member name="F:XLib.XLeveling.Ability.maxTier">
            <summary>
            The maximum tier of this ability.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.Ability.MaxTier">
            <summary>
            Gets or sets the maximum tier of this ability.
            If you change the tier of an ability you must also adjust the value array!
            It resizes the array. But you have to fill in additional values eventually.
            </summary>
            <value>
            The maximum tier.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.ValuesPerTier">
            <summary>
            Gets how many values per tier exists.
            </summary>
            <value>
            The values per tier.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.Values">
            <summary>
            Gets the values that are specific for this ability.
            Can be modified by mods and in the default generated config files and is used for dynamic description string generation.
            The array stores a set of integers for every ability tier.
            The index of a specific value is calculated by: ([tier] - 1) * [valuesPerTier] + [id]
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.Requirements">
            <summary>
            Gets the requirements of this ability.
            This can be one of the defined requirements or you implement your own requirement.
            You can use the AddRequirement method to add a new requirement.
            </summary>
            <value>
            The requirements.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.OnPlayerAbilityTierChanged">
            <summary>
            Gets or sets a method that is called every time a tier of a player ability changed.
            </summary>
            <value>
            The method.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XLib.XLeveling.Ability"/> is enabled.
            Disabled abilities are always tier zero and are hidden in the user interface.
            Set this value before any player joins the world.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Ability.HideUntilLearnable">
            <summary>
            Gets or sets a value indicating whether this ability is hidden until all requirements are fulfilled.
            </summary>
            <value>
              <c>true</c> if this ability is hidden until all requirements are fulfilled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:XLib.XLeveling.Ability.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.Ability" /> class.
            All integers of the values array are set to zero.
            </summary>
            <param name="name">The internal name of this ability. Used to save, load and identify this ability.
            This should always be the same and must be unique in its skill.</param>
            <param name="displayName">The name that is displayed in the game.
            Can be localized.</param>
            <param name="description">The description of the ability. This can contain placeholders for string interpolation.
            The string interpolation will use the values from the values array.</param>
            <param name="minLevel">The minimum skill level that is required to learn this ability.</param>
            <param name="maxTier">The maximum tier of this ability.</param>
            <param name="valuesPerTier">The number of values per tier that exists.</param>
            <param name="hideUntilLearnable">if set to <c>true</c> this ability is hidden until all requirements are fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if name is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.Ability.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.Ability" /> class.
            </summary>
            <param name="name">The internal name of this ability. Used to save, load and identify this ability.
            This should always be the same and must be unique in its skill.</param>
            <param name="displayName">The name that is displayed in the game.
            Can be localized.</param>
            <param name="description">The description of the ability. This can contain placeholders for string interpolation.
            The string interpolation will use the values from the values array.</param>
            <param name="minLevel">The minimum skill level that is required to learn this ability.</param>
            <param name="maxTier">The maximum tier of this ability.</param>
            <param name="values">The values that are specific for this ability.
            Can be modified by mods and in the default generated config files and is used for dynamic description string generation.
            The array stores a set of integers for every ability tier.
            The index of a specific value is calculated by: ([tier] - 1) * [valuesPerTier] + [id]</param>
            <param name="hideUntilLearnable">if set to <c>true</c> this ability is hidden until all requirements are fulfilled.</param>
            Values are copied.
            <exception cref="T:System.ArgumentNullException">Is thrown if name is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.Ability.Value(System.Int32,System.Int32)">
            <summary>
            Returns the value with the index ([tier] - 1) * [valuesPerTier] + [id]
            </summary>
            <param name="tier">The tier.</param>
            <param name="id">The identifier.</param>
            <returns>
              the value with the index ([tier] - 1) * [valuesPerTier] + [id] if the index is valid; otherwise, 0
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Ability.SetValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the value with the index ([tier] - 1) * [valuesPerTier] + [id]
            </summary>
            <param name="tier">The tier.</param>
            <param name="id">The identifier.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the index is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Ability.FormattedDescription(System.Int32)">
            <summary>
            Returns a formatted description.
            Override this method to create a custom description.
            </summary>
            <param name="tier">The tier for which the description should be generated.</param>
            <returns>
              a formatted description
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Ability.OnTierChanged(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Called when a associated player ability changed its tier.
            Default behavior just calls the OnPlayerAbilityTierChanged delegate if one exists.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="oldTier">The old tier.</param>
        </member>
        <member name="M:XLib.XLeveling.Ability.AddRequirement(XLib.XLeveling.Requirement)">
            <summary>
            Adds a requirement.
            This can be one of the defined requirements or you implement your own <see cref="T:XLib.XLeveling.Requirement" />.
            </summary>
            <param name="requirement">The requirement.</param>
        </member>
        <member name="M:XLib.XLeveling.Ability.RemoveRequirement(XLib.XLeveling.Requirement)">
            <summary>
            Removes a requirement.
            </summary>
            <param name="requirement">The requirement.</param>
            <returns>
              <c>true</c> if the requirement has been successfully removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Ability.IsVisible(XLib.XLeveling.PlayerAbility)">
            <summary>
            Determines whether the specified player ability is visible.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <returns>
              <c>true</c> if the specified player ability is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Ability.FromConfig(XLib.XLeveling.AbilityConfig)">
            <summary>
            Fills this abilities values from a ability configuration.
            </summary>
            <param name="config">The ability configuration.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if config is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.Ability.RequiredLevel(System.Int32)">
            <summary>
            Returns the required skill level for the given ability tier.
            This method also includes requirements into the determination.
            </summary>
            <param name="tier"></param>
            <returns>the required skill level for the given ability tier</returns>
        </member>
        <member name="T:XLib.XLeveling.OnPlayerAbilityTierChangedDelegate">
            <summary>
            Is called every time a tier of a player ability changed.
            </summary>
            <param name="ability">The ability.</param>
            <param name="oldTier">The old tier.</param>
        </member>
        <member name="T:XLib.XLeveling.AbilityConfig">
            <summary>
            The configuration of an ability.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.AbilityConfig.name">
            <summary>
            The internal name of the ability.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.AbilityConfig.id">
            <summary>
            The internal identifier for the ability.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.AbilityConfig.maxTier">
            <summary>
            The maximum tier of the ability.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.AbilityConfig.minLevel">
            <summary>
            The minimum skill level you need to learn the ability.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.AbilityConfig.enabled">
            <summary>
            <c>true</c> if the ability is enabled; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.AbilityConfig.values">
            <summary>
            The values that are specific for this ability.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.AbilityConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.AbilityConfig"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.AbilityConfig.#ctor(XLib.XLeveling.Ability)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.AbilityConfig"/> class.
            </summary>
            <param name="ability">The ability.</param>
        </member>
        <member name="T:XLib.XLeveling.PlayerAbility">
            <summary>
            Represents an ability associated to a player.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.PlayerAbility.Ability">
            <summary>
            Gets the ability this player ability is associated to.
            </summary>
            <value>
            The ability.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerAbility.PlayerSkill">
            <summary>
            Gets the player skill this player ability is associated to.
            </summary>
            <value>
            The player skill.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerAbility.IgnoredRequirements">
            <summary>
            Decides which requirements should be ignored when increasing tiers.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.PlayerAbility.tier">
            <summary>
            The current tier of the player ability.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.PlayerAbility.Tier">
            <summary>
            Gets the current tier of the player ability.
            </summary>
            <value>
            The tier.
            </value>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbility.#ctor(XLib.XLeveling.Ability,XLib.XLeveling.PlayerSkill,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.PlayerAbility" /> class.
            </summary>
            <param name="ability">The ability this player ability is associated to.</param>
            <param name="playerSkill">The player skill this player ability is associated to.</param>
            <param name="tier">The current tier of the player ability.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if ability or playerSkill is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbility.Value(System.Int32,System.Int32)">
            <summary>
            Returns the value with the index ([tier] - 1) * [valuesPerTier] + [id]
            </summary>
            <param name="id">The identifier.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            the value with the index ([tier] - 1) * [valuesPerTier] + [id] if the index is valid; the default value if the tier is 0; otherwise, 0
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbility.FValue(System.Int32,System.Single)">
            <summary>
            Returns the value with the index ([tier] - 1) * [valuesPerTier] + [id] multiplied by 0.01
            </summary>
            <param name="id">The identifier.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            the value with the index ([tier] - 1) * [valuesPerTier] + [id] multiplied by 0.01 if the index is valid; the default value if the tier is 0; otherwise, 0
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbility.SkillDependentValue(System.Int32)">
            <summary>
            Returns a skill dependent value.
            With following equation:
            Min(
            Value(([tier] - 1) * [valuesPerTier]) +
            Value(([tier] - 1) * [valuesPerTier] + 1) * [Skill Level],
            Value(([tier] - 1) * [valuesPerTier] + 2);
            The ability must have 3 or more values per tier for this method to work.
            </summary>
            <param name="skillLevel">The skill level. If set to 0 the method will use the skill level of the skill this ability belongs to.</param>
            <returns>
            a skill dependent value if the player ability can calculate one; otherwise, 0.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbility.SkillDependentFValue(System.Int32)">
            <summary>
            Returns a skill dependent value.
            With following equation:
            Min(
            Value(([tier] - 1) * [valuesPerTier]) +
            Value(([tier] - 1) * [valuesPerTier] + 1) * [Skill Level],
            Value(([tier] - 1) * [valuesPerTier] + 2) * 0.01;
            The ability must have 3 or more values per tier for this method to work.
            </summary>
            <param name="skillLevel">The skill level. If set to 0 the method will use the skill level of the skill this ability belongs to.</param>
            <returns>
            a skill dependent value if the player ability can calculate one; otherwise, 0.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbility.SetTier(System.Int32)">
            <summary>
            Sets the tier of this ability.
            Use this method to set a tier.
            </summary>
            <param name="tier">The tier.</param>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbility.CheckRequirements">
            <summary>
            Is called after all skills and abilities are loaded to ensure that all requirements except weak requirements are fulfilled.
            This functions is also called after a ability tier is decreased to check whether other requirements are no longer fulfilled.
            </summary>
            <returns>
              whether this function changed the tier.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbility.RequirementsFulfilled(System.Int32)">
            <summary>
            Checks whether all requirements for a specific tier are fulfilled.
            </summary>
            <param name="tier">The tier to check.</param>
            <returns>
              whether all requirements are fulfilled.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerAbility.IsVisible">
            <summary>
            Determines whether this player ability is visible.
            </summary>
            <returns>
              <c>true</c> if this player ability is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.SavedPlayerAbility">
            <summary>
            Used to save player abilities.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SavedPlayerAbility.Tier">
            <summary>
            The tier of the ability.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SavedPlayerAbility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SavedPlayerAbility"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SavedPlayerAbility.#ctor(XLib.XLeveling.PlayerAbility)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SavedPlayerAbility"/> class.
            </summary>
            <param name="playerAbility">The player ability.</param>
        </member>
        <member name="T:XLib.XLeveling.PlayerSkill">
            <summary>
            Represents a skill associated to a player.
            Contains player specific data for a skill.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.Skill">
            <summary>
            Gets the skill that is associated to the player skill.
            </summary>
            <value>
            The skill.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.PlayerSkillSet">
            <summary>
            Gets the player skill set this skill is associated to.
            </summary>
            <value>
            The player skill set.
            </value>
        </member>
        <member name="F:XLib.XLeveling.PlayerSkill.level">
            <summary>
            The current level of this player skill.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.Hidden">
            <summary>
            Gets or sets a value indicating if the skill is hidden for this player.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.Level">
            <summary>
            Gets the current level of this player skill.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="F:XLib.XLeveling.PlayerSkill.experience">
            <summary>
            The current experience of this player skill.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.Experience">
            <summary>
            Gets the current experience of this player skill.
            Use the AddExperience method to add experience to a skill.
            </summary>
            <value>
            The experience.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.RequiredExperience">
            <summary>
            Gets the for the next level required experience.
            </summary>
            <value>
            The required experience.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.PlayerAbilities">
            <summary>
            Gets the player abilities associated with this skill.
            </summary>
            <value>
            The player abilities.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:XLib.XLeveling.PlayerAbility" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:XLib.XLeveling.PlayerAbility" />.
            </value>
            <param name="index">The index.</param>
            <returns>the <see cref="T:XLib.XLeveling.PlayerAbility" /> at the specified index</returns>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.AbilityPoints">
            <summary>
            Gets the number of additional abilities the player can learn.
            </summary>
            <value>
            The ability points.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkill.ExperienceMultiplier">
            <summary>
            Gets or sets the experience multiplier.
            </summary>
            <value>
            The experience multiplier.
            </value>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkill.#ctor(XLib.XLeveling.Skill,XLib.XLeveling.PlayerSkillSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.PlayerSkill" /> class.
            </summary>
            <param name="skill">The skill that is associated to the player skill.</param>
            <param name="playerSkillSet">The player skill set this skill is associated to.</param>
            <param name="level">The level.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if skill or playerSkillSet is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkill.Ability(System.Int32)">
            <summary>
            Gets the <see cref="T:XLib.XLeveling.PlayerAbility" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            the <see cref="T:XLib.XLeveling.PlayerAbility" /> at the specified index
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkill.FindAbility(System.String,System.Boolean)">
            <summary>
            Finds a player ability by its name.
            </summary>
            <param name="abilityName">Name of the ability.</param>
            <param name="allowDisplayName">if set to <c>true</c> the method also looks for matching display names.</param>
            <returns>
            The palyer ability if a ability with the given name is in this skill; otherwise, <c>null</c>
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkill.AddExperience(System.Single,System.Boolean)">
            <summary>
            Adds experience to this skill.
            Use this method to add experience to a skill.
            </summary>
            <param name="experience">The experience.</param>
            <param name="invokeModifiers">if set to <c>true</c> experience modifiers will be invoked.</param>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkill.FromSavedSkill(XLib.XLeveling.SavedPlayerSkill)">
            <summary>
            Fills this player skills from a saved player skill.
            </summary>
            <param name="saved">The saved.</param>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkill.CheckRequirements(XLib.XLeveling.EnumRequirementType)">
            <summary>
            Checks if the requirements for all abilities are fulfilled and tries to correct errors.
            </summary>
            <param name="ignored">Sets which requirements should be ignored.</param>
            <returns>
              <c>true</c> if a ability tier was changed; otherwise, false
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkill.Reset">
            <summary>
            Sets the tiers of the abilities of this skill to 0.
            Also checks the requirements of all abilities.
            </summary>
        </member>
        <member name="T:XLib.XLeveling.SavedPlayerSkill">
            <summary>
            Used to save player skills.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SavedPlayerSkill.Level">
            <summary>
            The level of the skill.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SavedPlayerSkill.Experience">
            <summary>
            The current experience of this player skill.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SavedPlayerSkill.Abilities">
            <summary>
            he player abilities that are associated to the player skill.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SavedPlayerSkill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SavedPlayerSkill"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SavedPlayerSkill.#ctor(XLib.XLeveling.PlayerSkill)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SavedPlayerSkill"/> class.
            </summary>
            <param name="playerSkill">The player skill.</param>
        </member>
        <member name="T:XLib.XLeveling.PlayerSkillSet">
            <summary>
            Represents a set of player skills.
            Will be created for every player by the XLeveling interface.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.Player">
            <summary>
            Gets the player interface.
            </summary>
            <value>
            The player.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.PlayerSkills">
            <summary>
            Gets the player skills.
            </summary>
            <value>
            The player skills.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.XLeveling">
            <summary>
            Gets the XLeveling interface.
            </summary>
            <value>
            The XLeveling interface.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.Knowledge">
            <summary>
            Gets the knowledge.
            This is a dictionary with a string key[knowledge name].
            And a specific value for the knowledge in this field.
            </summary>
            <value>
            The knowledge.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:XLib.XLeveling.PlayerSkill"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:XLib.XLeveling.PlayerSkill"/>.
            </value>
            <param name="index">The index.</param>
            <returns>the <see cref="T:XLib.XLeveling.PlayerSkill"/> at the specified index</returns>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.UnusedPlayerSkills">
            <summary>
            The unused player skills.
            Contains player skills that are saved but not used currently.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.UnlearnPoints">
            <summary>
            Gets or sets the unlearn points.
            </summary>
            <value>
            The unlearn points.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.UnlearnCooldown">
            <summary>
            Gets or sets the timestamp at which the next ability can be forgotten.
            </summary>
            <value>
            The timestamp at which the next ability can be forgotten.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.Sparring">
            <summary>
            Gets or sets whether sparring is enabled. 
            If a player with sparring enabled was killed by a player 
            who has also sparring enabled he will not loose any experience.
            </summary>
            <value>
            The value that determines whether sparring is enabled.
            </value>
        </member>
        <member name="P:XLib.XLeveling.PlayerSkillSet.LastDeath">
            <summary>
            Gets or sets the last death in total world hours.
            </summary>
            <value>
            The last death.
            </value>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillSet.#ctor(Vintagestory.API.Common.IPlayer,XLib.XLeveling.SkillSetTemplate,XLib.XLeveling.XLeveling)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.PlayerSkillSet" /> class.
            </summary>
            <param name="player">The player interface.</param>
            <param name="skillSetTemplate">The skill set template.</param>
            <param name="xLeveling">The XLeveling interface.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if player or skillSetTemplate is null.</exception>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillSet.Skill(System.Int32)">
            <summary>
            Gets the <see cref="T:XLib.XLeveling.PlayerSkill" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            the <see cref="T:XLib.XLeveling.PlayerSkill" /> at the specified index
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillSet.Ability(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:XLib.XLeveling.PlayerAbility" /> at the specified indices.
            </summary>
            <param name="skillIndex">Index of the skill.</param>
            <param name="abilityIndex">Index of the ability.</param>
            <returns>
            the <see cref="T:XLib.XLeveling.PlayerAbility" /> at the specified index
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillSet.FindSkill(System.String,System.Boolean)">
            <summary>
            Finds a player skill by its name.
            </summary>
            <param name="skillName">Name of the skill.</param>
            <param name="allowDisplayName">if set to <c>true</c> the method also looks for matching display names.</param>
            <returns>
            The palyer skill if a skill with the given name exists; otherwise, <c>null</c>
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillSet.FromSavedSkillSet(XLib.XLeveling.SavedPlayerSkillSet)">
            <summary>
            Fills this player skills set from a saved player skill set.
            </summary>
            <param name="saved">The saved.</param>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillSet.CheckRequirements(XLib.XLeveling.EnumRequirementType)">
            <summary>
            Checks if the requirements for all abilities are fulfilled and tries to correct errors.
            </summary>
            <param name="ignored">Sets which requirements should be ignored.</param>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillSet.CanUnlearn(System.Int32)">
            <summary>
            Determines whether the player can unlearn an ability.
            </summary>
            <param name="tiers">The number of tiers that shoud be removed.</param>
            <returns>
              <c>true</c> if the player can unlearn an ability; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillSet.PropertyName">
            <summary>
            The name of the property tied to this entity behavior.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XLib.XLeveling.PlayerSkillSet.OnGameTick(System.Single)">
            <summary>
            The event fired when a game ticks over.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="T:XLib.XLeveling.SavedPlayerSkillSet">
            <summary>
            Used to save player skill sets.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SavedPlayerSkillSet.UnlearnPoints">
            <summary>
            The unlearn points
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SavedPlayerSkillSet.UnlearnCooldown">
            <summary>
            The timestamp at which the next ability can be forgotten.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SavedPlayerSkillSet.Sparring">
            <summary>
            The value that determines whether sparring is enabled.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SavedPlayerSkillSet.Skills">
            <summary>
            The player skills that belongs to the player.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SavedPlayerSkillSet.Knowledge">
            <summary>
            The knowledge of the player.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SavedPlayerSkillSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SavedPlayerSkillSet"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SavedPlayerSkillSet.#ctor(XLib.XLeveling.PlayerSkillSet)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SavedPlayerSkillSet"/> class.
            </summary>
            <param name="playerSkillSet">The player skill set.</param>
        </member>
        <member name="T:XLib.XLeveling.Skill">
            <summary>
            Represents a skill in general.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.Skill.Name">
            <summary>
            Gets the internal name of this skill. Used to save, load and identify this skill.
            This should always be the same and must be unique.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.DisplayName">
            <summary>
            Gets or sets the name that is displayed in the game.
            Can be localized.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.Group">
            <summary>
            Gets or sets the group.
            This is only used by the gui.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.XLeveling">
            <summary>
            The xleveling mod this skill belongs to.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.Skill.Id">
            <summary>
            Gets the internal identifier for this skill. This will be set by the XLeveling interface.
            Is used to quickly identify this skill and can also be used to identify the associated player skill in a player skill set.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.ExpBase">
            <summary>
            Gets or sets the experience base.
            The base is used for the calculation of the required experience for the next level.
            The default calculation is [expBase] * pow([expMult], current level - 1).
            </summary>
            <value>
            The experience base.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.ExpMult">
            <summary>
            Gets or sets the experience multiplier.
            The multiplier is used for the calculation of the required experience for the next level.
            The default calculation is [expBase] * pow([expMult], current level - 1)
            </summary>
            <value>
            The experience multiplier.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.ExpEquationValue">
            <summary>
            Gets or sets An additional value for the calculation of the required experience for the next level.
            This value is not used for the default calculation.
            </summary>
            <value>
            The exp calculate value.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.MaxLevel">
            <summary>
            Gets or sets the maximum level that a player can reach in this skill.
            </summary>
            <value>
            The maximum level.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XLib.XLeveling.Skill"/> is enabled.
            Disabled skills are always level zero and are hidden in the user interface.
            Set this value before any player joins the world.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.Abilities">
            <summary>
            Gets the abilities that are associated to this skill.
            You can use the ability id to receive a specific ability.
            </summary>
            <value>
            The abilities.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.Item(System.Int32)">
            <summary>
            Gets the <see cref="M:XLib.XLeveling.Skill.Ability(System.Int32)"/> at the specified index.
            </summary>
            <value>
            The <see cref="M:XLib.XLeveling.Skill.Ability(System.Int32)"/>.
            </value>
            <param name="index">The index.</param>
            <returns>the <see cref="M:XLib.XLeveling.Skill.Ability(System.Int32)"/> at the specified index</returns>
        </member>
        <member name="P:XLib.XLeveling.Skill.ExperienceEquation">
            <summary>
            Gets or sets the experience equation.
            Is only required if you don't want to use the default one.
            </summary>
            <value>
            The experience equation.
            </value>
        </member>
        <member name="F:XLib.XLeveling.Skill.specialisationID">
            <summary>
            The specialisation ability identifier.
            The ability with this id will be used for experience gain calculations.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.Skill.SpecialisationID">
            <summary>
            Gets or sets the specialisation ability identifier.
            The ability with this id will be used for experience gain calculations.
            The id must exist within the abilities of this skill.
            </summary>
            <value>
            The specialisation ability identifier.
            Must be a valid ability ID.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.Config">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:XLib.XLeveling.Skill.ClassExpMultipliers">
            <summary>
            Gets or sets the class exp multipliers.
            </summary>
            <value>
            The class exp multipliers.
            </value>
        </member>
        <member name="M:XLib.XLeveling.Skill.#ctor(System.String,System.String,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.Skill" /> class.
            </summary>
            <param name="name">The internal name of this skill. Used to save, load and identify this skill.
            This should always be the same and must be unique.</param>
            <param name="displayName">The name that is displayed in the game.
            Can be localized.</param>
            <param name="group">The name of the skill group.</param>
            <param name="expBase">The base for the calculation of the required experience for the next level.
            The default calculation is [expBase] * pow([expMult], current level - 1)</param>
            <param name="expMult">The multiplier for the calculation of the required experience for the next level.
            The default calculation is [expBase] * pow([expMult], current level - 1).</param>
            <param name="maxLevel">The maximum level that a player can reach in this skill.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if name is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.Skill.AddAbility(XLib.XLeveling.Ability)">
            <summary>
            Adds an ability to the skill. 
            Fails if the ability already belongs to a skill or an ability with the same name is exists already within this skill.
            Also sets the ability id. That can be used to identify the ability.
            </summary>
            <param name="ability">The ability.</param>
            <returns>
              the id of the added ability if the method succeeds; otherwise, -1
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Skill.ReplaceAbility(System.Int32,XLib.XLeveling.Ability)">
            <summary>
            Replaces an ability of the skill. 
            Fails if the ability already belongs to a skill or an ability with the same name is exists already within this skill.
            Also fails if the ValuesPerTier value of the old ability is greater than the ValuesPerTier value of the new ability.
            Also sets the ability id. That can be used to identify the ability.
            </summary>
            <param name="index">The index of the ability that should be replaced.</param>
            <param name="ability">The new ability.</param>
            <returns>
              the id of the added ability if the method succeeds; otherwise, -1
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Skill.Ability(System.Int32)">
            <summary>
            Gets the <see cref="T:XLib.XLeveling.PlayerAbility" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            the <see cref="M:XLib.XLeveling.Skill.Ability(System.Int32)" /> at the specified index
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Skill.FindAbility(System.String,System.Boolean)">
            <summary>
            Finds an ability by its name.
            </summary>
            <param name="abilityName">Name of the ability.</param>
            <param name="allowDisplayName">if set to <c>true</c> the method also looks for matching display names.</param>
            <returns>
              The ability if a ability with the given name is in this skill; otherwise, <c>null</c>
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Skill.ContainsAbility(System.String)">
            <summary>
            Determines whether the skill contains an ability with the specified ability name.
            </summary>
            <param name="abilityName">Name of the ability.</param>
            <returns>
              <c>true</c> if the skill contains an ability with the specified ability name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Skill.GetRequiredExperience(System.Int32,System.Boolean)">
            <summary>
            Gets the experience that is required to reach a specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="includePreviousLevels">if set to <c>true</c> the method also includes the experience for all previous levels.</param>
            <returns>
              the experience that is required to reach a specified level.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Skill.GetExperienceMultiplier(XLib.XLeveling.PlayerSkillSet,System.Boolean)">
            <summary>
            Gets the experience multiplier for a specific player.
            </summary>
            <param name="playerSkillSet">The player skill set of a player.</param>
            <param name="includeGlobalModifiers">Decides whether global modifiers should be included.</param>
            <returns>the experience multiplier for a specific player; returns 0.0f if playerSkillSet is null</returns>
        </member>
        <member name="M:XLib.XLeveling.Skill.OnConfigReceived">
            <summary>
            This function is called after the skill configuration for this skill have been received from a server.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.Skill.FromConfig(XLib.XLeveling.SkillConfig)">
            <summary>
            Fills this skills values from a skill configuration.
            </summary>
            <param name="config">The skill configuration.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if config is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.Skill.LogarithmicEquation(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            A logarithmic experience equation.
            ln(level - 1) * expMult + expBase
            </summary>
            <param name="expBase">The exp base.</param>
            <param name="expMult">The exp mult.</param>
            <param name="expEquationValue">The exp equation value.</param>
            <param name="level">The level.</param>
            <returns>
              the experience that is required to reach a specified level.
            </returns>
        </member>
        <member name="M:XLib.XLeveling.Skill.QuadraticEquation(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            A quadratic experience equation.
            expEquationValue * (level-2)^2 + (level-2) * expMult + expBase
            </summary>
            <param name="expBase">The exp base.</param>
            <param name="expMult">The exp mult.</param>
            <param name="expEquationValue">The exp equation value.</param>
            <param name="level">The level.</param>
            <returns>
              the experience that is required to reach a specified level.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.ExperienceEquationDelegate">
            <summary>
            Calculates the required experience for a specific level.
            </summary>
            <param name="expBase">The exp base.</param>
            <param name="expMult">The exp mult.</param>
            <param name="expEquationValue">The exp calculate value.</param>
            <param name="level">The level the experience should be calculated for.</param>
            <returns>
              the experience that is required to reach a specified level.
            </returns>
        </member>
        <member name="T:XLib.XLeveling.SkillConfig">
            <summary>
            The configuration of a skill.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.note">
            <summary>
            A note for the configuration file.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.name">
            <summary>
            The name of the skill.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.id">
            <summary>
            The internal identifier for the skill.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.maxLevel">
            <summary>
            The maximum level that a player can reach in this skill.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.expBase">
            <summary>
            The base for the calculation of the required experience for the next level.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.expMult">
            <summary>
            The multiplier for the calculation of the required experience for the next level.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.expValue">
            <summary>
            An additional value for the calculation of the required experience for the next level.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.expEquation">
            <summary>
            The name of the equation used to calculate the experience.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.enabled">
            <summary>
            Decides whether this skill is enabled
            </summary>
        </member>
        <member name="F:XLib.XLeveling.SkillConfig.abilities">
            <summary>
            The configuration of the associated abilities.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.SkillConfig.Attributes">
            <summary>
            Gets or sets the attributes. This contains the values of the custom config.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:XLib.XLeveling.SkillConfig.ClassExpMultipliers">
            <summary>
            Gets or sets the class exp multipliers.
            </summary>
            <value>
            The class exp multipliers.
            </value>
        </member>
        <member name="M:XLib.XLeveling.SkillConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SkillConfig"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SkillConfig.#ctor(XLib.XLeveling.Skill)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SkillConfig"/> class.
            </summary>
            <param name="skill">The skill.</param>
        </member>
        <member name="T:XLib.XLeveling.CustomSkillConfig">
            <summary>
            A custom skill configuration.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.CustomSkillConfig.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="T:XLib.XLeveling.SkillSetTemplate">
            <summary>
            Represents a set of skills.
            This is the template for the creation of a player skill sets.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.SkillSetTemplate.Skills">
            <summary>
            Gets the skills.
            </summary>
            <value>
            The skills.
            </value>
        </member>
        <member name="P:XLib.XLeveling.SkillSetTemplate.Count">
            <summary>
            Gets the count of skills in this template.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:XLib.XLeveling.SkillSetTemplate.Item(System.Int32)">
            <summary>
            Gets the <see cref="M:XLib.XLeveling.SkillSetTemplate.Skill(System.Int32)"/> at the specified index.
            </summary>
            <value>
            The <see cref="M:XLib.XLeveling.SkillSetTemplate.Skill(System.Int32)"/>.
            </value>
            <param name="index">The index.</param>
            <returns>the <see cref="M:XLib.XLeveling.SkillSetTemplate.Skill(System.Int32)"/> at the specified index</returns>
        </member>
        <member name="M:XLib.XLeveling.SkillSetTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.SkillSetTemplate"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.SkillSetTemplate.AddSkill(XLib.XLeveling.Skill)">
            <summary>
            Adds the skill to the skill set template. The method fails if a skill with the name is already in the skill set template or skill is <c>null</c>.
            </summary>
            <param name="skill">The skill.</param>
            <returns>
              the id of the added skill if the method succeeds; otherwise, -1
            </returns>
        </member>
        <member name="M:XLib.XLeveling.SkillSetTemplate.Skill(System.Int32)">
            <summary>
            Gets the <see cref="M:XLib.XLeveling.SkillSetTemplate.Skill(System.Int32)" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            the <see cref="M:XLib.XLeveling.SkillSetTemplate.Skill(System.Int32)" /> at the specified index
            </returns>
        </member>
        <member name="M:XLib.XLeveling.SkillSetTemplate.Ability(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="M:XLib.XLeveling.SkillSetTemplate.Ability(System.Int32,System.Int32)" /> at the specified indices.
            </summary>
            <param name="skillIndex">Index of the skill.</param>
            <param name="abilityIndex">Index of the ability.</param>
            <returns>
            the <see cref="M:XLib.XLeveling.SkillSetTemplate.Ability(System.Int32,System.Int32)" /> at the specified index
            </returns>
        </member>
        <member name="M:XLib.XLeveling.SkillSetTemplate.FindSkill(System.String,System.Boolean)">
            <summary>
            Gets the skill by its name.
            </summary>
            <param name="name">The name.</param>
            <param name="allowDisplayName">if set to <c>true</c> the method also looks for skills with this display name.</param>
            <returns>
            the skill with the given name if it exists; otherwise, <c>null</c>
            </returns>
        </member>
        <member name="T:XLib.XLeveling.StatAbility">
            <summary>
            Represents an ability that is associated to a player stat.
            </summary>
            <seealso cref="T:XLib.XLeveling.Ability" />
        </member>
        <member name="P:XLib.XLeveling.StatAbility.Stat">
            <summary>
            Gets or sets the stat that this ability modifies.
            </summary>
            <value>
            The stat.
            </value>
        </member>
        <member name="M:XLib.XLeveling.StatAbility.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.StatAbility" /> class.
            All integers of the values array are set to zero.
            </summary>
            <param name="name">The internal name of this ability. Used to save, load and identify this ability.
            This should always be the same and must be unique in its skill.</param>
            <param name="stat">The stat that this ability modifies.</param>
            <param name="displayName">The name that is displayed in the game.
            Can be localized.</param>
            <param name="description">The description of the ability. This can contain placeholders for string interpolation.
            The string interpolation will use the values from the values array.</param>
            <param name="minLevel">The minimum skill level that is required to learn this ability.</param>
            <param name="maxTier">The maximum tier of this ability.</param>
            <param name="valuesPerTier">The number of values per tier that exists.</param>
            <param name="hideUntilLearnable">if set to <c>true</c> this ability is hidden until all requirements are fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if name is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.StatAbility.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.Ability" /> class.
            </summary>
            <param name="name">The internal name of this ability. Used to save, load and identify this ability.
            This should always be the same and must be unique in its skill.</param>
            <param name="stat">The stat that this ability modifies.</param>
            <param name="displayName">The name that is displayed in the game.
            Can be localized.</param>
            <param name="description">The description of the ability. This can contain placeholders for string interpolation.
            The string interpolation will use the values from the values array.</param>
            <param name="minLevel">The minimum skill level that is required to learn this ability.</param>
            <param name="maxTier">The maximum tier of this ability.</param>
            <param name="values">The values that are specific for this ability.
            Can be modified by mods and in the default generated config files and is used for dynamic description string generation.
            The array stores a set of integers for every ability tier.
            The index of a specific value is calculated by: ([tier] - 1) * [valuesPerTier] + [id]</param>
            <param name="hideUntilLearnable">if set to <c>true</c> this ability is hidden until all requirements are fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if name is <c>null</c>.</exception>
            Values are copied.
        </member>
        <member name="M:XLib.XLeveling.StatAbility.OnTierChanged(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Called when a associated player ability changed its tier.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="oldTier">The old tier.</param>
        </member>
        <member name="T:XLib.XLeveling.StatsAbility">
            <summary>
            Represents an ability that is associated to player stats.
            </summary>
            <seealso cref="T:XLib.XLeveling.Ability" />
        </member>
        <member name="P:XLib.XLeveling.StatsAbility.Stats">
            <summary>
            Gets or sets the stat that this ability modifies.
            </summary>
            <value>
            The stat.
            </value>
        </member>
        <member name="M:XLib.XLeveling.StatsAbility.#ctor(System.String,System.String[],System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.StatsAbility" /> class.
            All integers of the values array are set to zero.
            </summary>
            <param name="name">The internal name of this ability. Used to save, load and identify this ability.
            This should always be the same and must be unique in its skill.</param>
            <param name="stats">The stats that this ability modifies.</param>
            <param name="displayName">The name that is displayed in the game.
            Can be localized.</param>
            <param name="description">The description of the ability. This can contain placeholders for string interpolation.
            The string interpolation will use the values from the values array.</param>
            <param name="minLevel">The minimum skill level that is required to learn this ability.</param>
            <param name="maxTier">The maximum tier of this ability.</param>
            <param name="valuesPerTier">The number of values per tier that exists.</param>
            <param name="hideUntilLearnable">if set to <c>true</c> this ability is hidden until all requirements are fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if name is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.StatsAbility.#ctor(System.String,System.String[],System.String,System.String,System.Int32,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.Ability" /> class.
            </summary>
            <param name="name">The internal name of this ability. Used to save, load and identify this ability.
            This should always be the same and must be unique in its skill.</param>
            <param name="stats">The stats that this ability modifies.</param>
            <param name="displayName">The name that is displayed in the game.
            Can be localized.</param>
            <param name="description">The description of the ability. This can contain placeholders for string interpolation.
            The string interpolation will use the values from the values array.</param>
            <param name="minLevel">The minimum skill level that is required to learn this ability.</param>
            <param name="maxTier">The maximum tier of this ability.</param>
            <param name="values">The values that are specific for this ability.
            Can be modified by mods and in the default generated config files and is used for dynamic description string generation.
            The array stores a set of integers for every ability tier.
            The index of a specific value is calculated by: ([tier] - 1) * [valuesPerTier] + [id]</param>
            <param name="hideUntilLearnable">if set to <c>true</c> this ability is hidden until all requirements are fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if name is <c>null</c>.</exception>
            Values are copied.
        </member>
        <member name="M:XLib.XLeveling.StatsAbility.OnTierChanged(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Called when a associated player ability changed its tier.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="oldTier">The old tier.</param>
        </member>
        <member name="T:XLib.XLeveling.TraitAbility">
            <summary>
            Represents an ability that is associated to a trait.
            You should only use this to enable crafting recipes with abilities. Don't use it with any other kind of trait.
            </summary>
            <seealso cref="T:XLib.XLeveling.Ability" />
        </member>
        <member name="P:XLib.XLeveling.TraitAbility.Trait">
            <summary>
            Gets or sets the trait that this ability adds.
            </summary>
            <value>
            The stat.
            </value>
        </member>
        <member name="M:XLib.XLeveling.TraitAbility.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.TraitAbility" /> class.
            All integers of the values array are set to zero.
            </summary>
            <param name="name">The internal name of this ability. Used to save, load and identify this ability.
            This should always be the same and must be unique in its skill.</param>
            <param name="trait">The trait that this ability adds.</param>
            <param name="displayName">The name that is displayed in the game.
            Can be localized.</param>
            <param name="description">The description of the ability. This can contain placeholders for string interpolation.
            The string interpolation will use the values from the values array.</param>
            <param name="minLevel">The minimum skill level that is required to learn this ability.</param>
            <param name="maxTier">The maximum tier of this ability.</param>
            <param name="valuesPerTier">The number of values per tier that exists.</param>
            <param name="hideUntilLearnable">if set to <c>true</c> this ability is hidden until all requirements are fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if name is <c>null</c>.</exception>
        </member>
        <member name="M:XLib.XLeveling.TraitAbility.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.Ability" /> class.
            </summary>
            <param name="name">The internal name of this ability. Used to save, load and identify this ability.
            This should always be the same and must be unique in its skill.</param>
            <param name="trait">The trait that this ability adds.</param>
            <param name="displayName">The name that is displayed in the game.
            Can be localized.</param>
            <param name="description">The description of the ability. This can contain placeholders for string interpolation.
            The string interpolation will use the values from the values array.</param>
            <param name="minLevel">The minimum skill level that is required to learn this ability.</param>
            <param name="maxTier">The maximum tier of this ability.</param>
            <param name="values">The values that are specific for this ability.
            Can be modified by mods and in the default generated config files and is used for dynamic description string generation.
            The array stores a set of integers for every ability tier.
            The index of a specific value is calculated by: ([tier] - 1) * [valuesPerTier] + [id]</param>
            <param name="hideUntilLearnable">if set to <c>true</c> this ability is hidden until all requirements are fulfilled.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if name is <c>null</c>.</exception>
            Values are copied.
        </member>
        <member name="M:XLib.XLeveling.TraitAbility.OnTierChanged(XLib.XLeveling.PlayerAbility,System.Int32)">
            <summary>
            Called when a associated player ability changed its tier.
            </summary>
            <param name="playerAbility">The player ability.</param>
            <param name="oldTier">The old tier.</param>
        </member>
        <member name="T:XLib.XLeveling.XLeveling">
            <summary>
            Represents the main interface for XLeveling and is used to initialize the mod.
            If you want to make a submod use the Instance method to receive an interface.
            </summary>
            <seealso cref="T:Vintagestory.API.Common.ModSystem" />
        </member>
        <member name="M:XLib.XLeveling.XLeveling.Instance(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Gets an instance of the <see cref="T:XLib.XLeveling.XLeveling" /> mod interface.
            Is the same as "api.ModLoader.GetModSystem("XLib.XLeveling.XLeveling") as XLeveling".
            </summary>
            <param name="api">The API.</param>
            <returns>
            an instance of the XLeveling mod interface, if it was found; otherwise, null
            </returns>
        </member>
        <member name="P:XLib.XLeveling.XLeveling.SkillsAssetCategory">
            <summary>
            the asset category
            </summary>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.ExecuteOrder">
            <summary>
            If you need mods to be executed in a certain order, adjust this methods return value.
            The server will call each Mods Start() method the ascending order of each mods execute order value. And thus, as long as every mod registers it's event handlers in the Start() method, all event handlers will be called in the same execution order.
            Default execute order of some survival mod parts
            Worldgen:
            - GenTerra: 0
            - RockStrata: 0.1
            - Deposits: 0.2
            - Caves: 0.3
            - Blocklayers: 0.4
            Asset Loading
            - Json Overrides loader: 0.05
            - Load hardcoded mantle block: 0.1
            - Block and Item Loader: 0.2
            - Recipes (Smithing, Knapping, Clayforming, Grid recipes, Alloys) Loader: 1
            </summary>
            <returns></returns>
        </member>
        <member name="P:XLib.XLeveling.XLeveling.Api">
            <summary>
            Gets the vintage story API.
            </summary>
            <value>
            The API.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLeveling.IXLevelingAPI">
            <summary>
            Gets a client and server specific interface.
            It takes care of synchronization between server and client and provides an common interface dependent on the side you are on at the moment.
            This value is only valid when this interface called the start method. Don't use it in the StartPre method.
            </summary>
            <value>
            The xleveling API.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLeveling.SkillSetTemplate">
            <summary>
            Gets the skill set template.
            </summary>
            <value>
            The skill set template.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLeveling.RequirementTypes">
            <summary>
            Gets the requirement types.
            </summary>
            <value>
            The requirement types.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLeveling.Limitations">
            <summary>
            Gets the limitations.
            </summary>
            <value>
            The limitations.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLeveling.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="F:XLib.XLeveling.XLeveling.XLibGroupName">
            <summary>
            Gets the name of the group name
            </summary>
            <value>
            The name of the group name
            </value>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.XLeveling"/> class.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.StartPre(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called during initial mod loading, called before any mod receives the call to Start()
            </summary>
            <param name="api">The vintage story API.</param>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.StartServerSide(Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
            Initializes the XLeveling interface on the server side.
            </summary>
            <param name="api">The vintage story server API.</param>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.StartClientSide(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Initializes the XLeveling interface on the client side.
            </summary>
            <param name="api">The vintage story client API.</param>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.Start(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Side agnostic Start method, called after all mods received a call to StartPre().
            </summary>
            <param name="api">The vintage story core API.</param>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.AssetsLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called on the server or the client; implementing code may need to check which side it is.
            <br />On a server, called only after all mods have called Start(), and after asset JSONs have been read from disk and patched, but before runphase ModsAndConfigReady.
            <br />Asset files are now available to load using api.Assets.TryGet() calls or similar.  It is not guaranteed that the actual in-game assets (including blocks and items) are yet registered!
            <br />If called from a modsystem, what has been registered at this stage depends on the ExecuteOrder().  After 0.2, blocks and items have been registered.  After 0.6, recipes have been registered.
            <br />If implementing this, and if your code requires that blocks, items and entities have been registered first, make sure your ModSystem has set an appropriate ExecuteOrder()!!
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.RegisterSkill(XLib.XLeveling.Skill)">
            <summary>
            Registers the skill for the skill set template.
            You should register all skills with this method in the StartPre method of your mod.
            Also don't forget to add all abilities to the skill.
            The method fails if a skill with the name is already in the skill set template or skill is <c>null</c>.
            </summary>
            <param name="skill">The skill.</param>
            <returns>
            the id of the added skill if the method succeeds; otherwise, -1
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.GetSkill(System.Int32)">
            <summary>
            Gets a skill based on its identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
            the skill with the given id if it exists; otherwise, <c>null</c>
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.GetSkill(System.String,System.Boolean)">
            <summary>
            Gets a skill by its name.
            </summary>
            <param name="name">The name.</param>
            <param name="allowDisplayName">if set to <c>true</c> the method also looks for skills with this display name.</param>
            <returns>
            the skill with the given name if it exists; otherwise, <c>null</c>
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.RegisterRequirement(System.String,System.Type)">
            <summary>
            Registers the requirement.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="requirementType">Type of the requirement.</param>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.LoadJsonSkills">
            <summary>
            Loads the skills from json files.
            Primarily to load requirements.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.ResolveRequirment(Vintagestory.API.Datastructures.TreeAttribute)">
            <summary>
            Resolves a requirement.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns>
              a requirement if it was successfully resolved; otherwise, null
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.RemoveRequirements(System.Collections.Generic.List{System.String})">
            <summary>
            Removes requirements.
            Uses Config.disabledRequirements to filter requirements by default
            </summary>
            <param name="requirements">Names of the requirements that should be removed.</param>
        </member>
        <member name="M:XLib.XLeveling.XLeveling.CreateDescriptionFile">
            <summary>
            Creates the description file.
            The file will contain the description of all abilities.
            </summary>
        </member>
        <member name="T:XLib.XLeveling.IXLevelingAPI">
            <summary>
            An interface for common server and client methods.
            Takes care of synchronization between server and client.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.IXLevelingAPI.GetPlayerSkillSet(Vintagestory.API.Common.IPlayer)">
            <summary>
            Gets the player skill set for the given player.
            </summary>
            <param name="player">The player.</param>
            <returns>
              on client side the local player skill set if the given player is the local one; otherwise, null
              on server side the player skill set of the given player if the player exists; otherwise null
            </returns>
        </member>
        <member name="M:XLib.XLeveling.IXLevelingAPI.AddExperienceToPlayerSkill(Vintagestory.API.Common.IPlayer,System.Int32,System.Single,System.Boolean)">
            <summary>
            Adds experience to a player skill.
            Use this method to give a player experience.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="experience">The experience.</param>
            <param name="informClient">if set to <c>true</c> the server will inform the client. In most cases this should be <c>true</c>. 
            Unless you are sure that the method is called on server and client side.</param>
        </member>
        <member name="M:XLib.XLeveling.IXLevelingAPI.SetPlayerSkillLevel(Vintagestory.API.Common.IPlayer,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the player skill level.
            Use this to force set a player skill level.
            If you give a player experience the level will be set automatically.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="level">The level.</param>
            <param name="informClient">if set to <c>true</c> the server will inform the client.</param>
        </member>
        <member name="M:XLib.XLeveling.IXLevelingAPI.SetAbilityTier(Vintagestory.API.Common.IPlayer,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the ability tier.
            Use this method to set the tier of a player ability.
            This method is used by the default gui to set a ability tier.
            In general you don't need to call this method.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="abilityId">The ability identifier.</param>
            <param name="tier">The tier.</param>
            <param name="informServer">if set to <c>true</c> the client informs the server that the player has chosen a tier.</param>
        </member>
        <member name="M:XLib.XLeveling.IXLevelingAPI.IncreaseAbilityTier(Vintagestory.API.Common.IPlayer,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Increases the ability tier.
            Use this method to increases the tier of a player ability.
            This method is used by the default gui to set a ability tier.
            In general you don't need to call this method.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="abilityId">The ability identifier.</param>
            <param name="informServer">if set to <c>true</c> the client informs the server that the player has chosen a tier.</param>
        </member>
        <member name="M:XLib.XLeveling.IXLevelingAPI.GetPointsForUnlearn">
            <summary>
            Returns the number of points you need to unlearn a skill
            </summary>
            <returns>
              the number of points you need to unlearn a skill
            </returns>
        </member>
        <member name="P:XLib.XLeveling.IXLevelingAPI.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="T:XLib.XLeveling.XLevelingClient">
            <summary>
            Represents a client side interface for some XLeveling methods
            </summary>
            <seealso cref="P:XLib.XLeveling.XLeveling.IXLevelingAPI" />
        </member>
        <member name="P:XLib.XLeveling.XLevelingClient.XLeveling">
            <summary>
            Gets the xLeveling mod system.
            </summary>
            <value>
            The xLeveling mod system.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingClient.LocalPlayerSkillSet">
            <summary>
            Gets the local player skill set.
            </summary>
            <value>
            The local player skill set.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingClient.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingClient.skillDialog">
            <summary>
            The skill dialog.
            This is the user interface for this mod.
            It displays all player skills and allows the player to choose abilities.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.XLevelingClient.channel">
            <summary>
            The channel for network communication with the server.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.XLevelingClient.AccumulatedExperience">
            <summary>
            Saves the experience accumulated over a specific time frame.
            </summary>
        </member>
        <member name="F:XLib.XLeveling.XLevelingClient.AccumulatedTimeStamp">
            <summary>
            The last timestamp at which accumulated experience has been printed.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.#ctor(XLib.XLeveling.XLeveling)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.XLevelingClient" /> class.
            </summary>
            <param name="xLeveling">The x leveling.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if xLeveling is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Is thrown if this function was called on the wrong side.</exception>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.LoadConfiguration">
            <summary>
            Loads the configuration.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.OnHotKeySkillDialog(Vintagestory.API.Client.KeyCombination)">
            <summary>
            Called when hotkey to open the skill dialog was pressed.
            Opens and closes the skill dialog.
            </summary>
            <param name="comb">The key combination.</param>
            <returns>
              <c>true</c>
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.MessageHandler(XLib.XLeveling.SkillConfig)">
            <summary>
            Handles the SkillConfig from the server.
            </summary>
            <param name="skillConfig">The skill configuration.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.MessageHandler(XLib.XLeveling.PlayerSkillPackage)">
            <summary>
            Handles the PlayerSkillPackage from the server.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.MessageHandler(XLib.XLeveling.ExperiencePackage)">
            <summary>
            Handles the ExperiencePackage from the server.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.MessageHandler(XLib.XLeveling.PlayerAbilityPackage)">
            <summary>
            Handles the PlayerAbilityPackage from the server.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.MessageHandler(XLib.XLeveling.CommandPackage)">
            <summary>
            Handles the CommandPackage from the server.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.MessageHandler(XLib.XLeveling.Config)">
            <summary>
            Handles the configuration from the server.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.MessageHandler(XLib.XLeveling.KnowledgePackage)">
            <summary>
            Handles the KnowledgePackage from the server.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.SendPackage(XLib.XLeveling.CommandPackage)">
            <summary>
            Sends a packet to the server.
            </summary>
            <param name="package">The package</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.GetPlayerSkillSet(Vintagestory.API.Common.IPlayer)">
            <summary>
            Gets the player skill set for the given player.
            </summary>
            <param name="player">The player.</param>
            <returns>
            on client side the local player skill set if the given player is the local one; otherwise, null
            on server side the player skill set of the given player if the player exists; otherwise null
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.AddExperienceToPlayerSkill(Vintagestory.API.Common.IPlayer,System.Int32,System.Single,System.Boolean)">
            <summary>
            Adds experience to a player skill.
            Use this method to give a player experience.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="experience">The experience.</param>
            <param name="informClient">if set to <c>true</c> the server will inform the client. In most cases this should be <c>true</c>.
            Unless you are sure that the method is called on server and client side.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.SetPlayerSkillLevel(Vintagestory.API.Common.IPlayer,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the players skill level.
            Use this to force set a player skill level.
            If you give a player experience the level will be set automatically.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="level">The level.</param>
            <param name="informClient">if set to <c>true</c> the server will inform the client.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.SetAbilityTier(Vintagestory.API.Common.IPlayer,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the ability tier.
            Use this method to set the tier of a player ability.
            This method is used by the default gui to set a ability tier.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="abilityId">The ability identifier.</param>
            <param name="tier">The tier.</param>
            <param name="informServer">if set to <c>true</c> the client informs the server that the player has chosen a tier.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.IncreaseAbilityTier(Vintagestory.API.Common.IPlayer,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Increases the ability tier.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="abilityId">The ability identifier.</param>
            <param name="informServer">if set to <c>true</c> the client informs the server that the player has chosen a tier.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingClient.GetPointsForUnlearn">
            <summary>
            Returns the number of points you need to unlearn a skill
            </summary>
            <returns>
            the number of points you need to unlearn a skill
            </returns>
        </member>
        <member name="T:XLib.XLeveling.XLevelingServer">
            <summary>
            Represents a server side interface for XLeveling
            </summary>
            <seealso cref="P:XLib.XLeveling.XLeveling.IXLevelingAPI" />
        </member>
        <member name="P:XLib.XLeveling.XLevelingServer.XLeveling">
            <summary>
            Gets the xLeveling mod system.
            </summary>
            <value>
            The xLeveling mod system.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingServer.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="F:XLib.XLeveling.XLevelingServer.channel">
            <summary>
            The channel for network communication with the clients.
            </summary>
        </member>
        <member name="P:XLib.XLeveling.XLevelingServer.PlayerSkillSets">
            <summary>
            Gets a list of all online players skill sets
            </summary>
            <value>
            The player skill sets.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingServer.DiscPlayerSkillSets">
            <summary>
            Gets a list of all disconnected players skill sets
            </summary>
            <value>
            The player skill sets.
            </value>
        </member>
        <member name="F:XLib.XLeveling.XLevelingServer.PlayerGroup">
            <summary>
            Gets the player group
            </summary>
            <value>
            The player group
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingServer.SaveFileDirectory">
            <summary>
            Gets the name of the save directory.
            </summary>
            <value>
            The name of the save directory.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingServer.BackupFileDirectory">
            <summary>
            Gets or sets the backup file directory.
            </summary>
            <value>
            The backup file directory.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingServer.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingServer.SaveFileName">
            <summary>
            Gets the name of the save file.
            </summary>
            <value>
            The name of the save file.
            </value>
        </member>
        <member name="P:XLib.XLeveling.XLevelingServer.BackupSaveFileName">
            <summary>
            Gets or sets the name of the backup save file.
            </summary>
            <value>
            The name of the backup save file.
            </value>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.#ctor(XLib.XLeveling.XLeveling)">
            <summary>
            Initializes a new instance of the <see cref="T:XLib.XLeveling.XLevelingServer" /> class.
            </summary>
            <param name="xLeveling">The x leveling.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if xLeveling is <c>null</c>.</exception>
            <exception cref="T:System.Exception">Is thrown if this function was called on the wrong side.</exception>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.LoadConfiguration">
            <summary>
            Loads the configuration.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.SendConfig(Vintagestory.API.Server.IServerPlayer)">
            <summary>
            Sends the configuration to players.
            </summary>
            <param name="byPlayer">The player.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.LoadFromFile(System.String)">
            <summary>
            Loads save data from a specific file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>
             1, if the method succeeded<br></br>
             0, if the file does not exist<br></br>
            -1, if the method failed
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.LoadData">
            <summary>
            Loads the skill data of all players form a json file.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.SaveData">
            <summary>
            Saves the skill data of all players to a json file.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnWorldSave">
            <summary>
            Called when the world was saved. Saves the mods player data.
            </summary>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnPlayerDisconnect(Vintagestory.API.Server.IServerPlayer)">
            <summary>
            Called when a player disconnects from the server.
            Updates the data table for this player.
            </summary>
            <param name="byPlayer">The by player.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.UpdatePlayerDataset(XLib.XLeveling.PlayerSkillSet)">
            <summary>
            Updates the dataset for a specific player skill set.
            </summary>
            <param name="playerSkillSet">The player skill set.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnPlayerCreate(Vintagestory.API.Server.IServerPlayer)">
            <summary>
            Called when a player joins the game for the first time.
            Sets up the player group.
            </summary>
            <param name="byPlayer"></param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnPlayerNowPlaying(Vintagestory.API.Server.IServerPlayer)">
            <summary>
            Called when a player is ready to play.
            Creates a skill entry for a player, sends the configuration to it and loads player data.
            </summary>
            <param name="byPlayer">The player.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.LoadPlayerSkillSet(Vintagestory.API.Server.IServerPlayer)">
            <summary>
            Loads data for a specific player.
            </summary>
            <param name="byPlayer">The player.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnPlayerDeath(Vintagestory.API.Server.IServerPlayer,Vintagestory.API.Common.DamageSource)">
            <summary>
            Called when a player died.
            Reduces the player experience for all skills.
            </summary>
            <param name="byPlayer">The player.</param>
            <param name="damageSource">The damage source.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnPlayerAbilityPackage(Vintagestory.API.Server.IServerPlayer,XLib.XLeveling.PlayerAbilityPackage)">
            <summary>
            Handles the PlayerSkillPackage from the client.
            </summary>
            <param name="fromPlayer">From player.</param>
            <param name="abilitySkilledPackage">The PlayerAbilityPackage.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnPlayerMessage(Vintagestory.API.Server.IServerPlayer,XLib.XLeveling.CommandPackage)">
            <summary>
            Handles the PlayerSkillPackage from the client.
            </summary>
            <param name="fromPlayer">From player.</param>
            <param name="package">The command package.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.GetPlayerSkillSet(Vintagestory.API.Common.IPlayer)">
            <summary>
            Gets the player skill set for the given player.
            </summary>
            <param name="player">The player.</param>
            <returns>
              on client side the local player skill set if the given player is the local one; otherwise, null
              on server side the player skill set of the given player if the player exists; otherwise null
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.GetPlayerSkillSet(System.String)">
            <summary>
            Gets the skill set of the player with the given name.
            </summary>
            <param name="playerName">Name of the player.</param>
            <returns>
              the skill set of the player with the given name if a player with this name exists; null, otherwise
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.AddExperienceToPlayerSkill(Vintagestory.API.Common.IPlayer,System.Int32,System.Single,System.Boolean)">
            <summary>
            Adds experience to a player skill.
            Use this method to give a player experience.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="experience">The experience.</param>
            <param name="informClient">if set to <c>true</c> the server will inform the client. In most cases this should be <c>true</c>.
            Unless you are sure that the method is called on server and client side.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.SetPlayerSkillLevel(Vintagestory.API.Common.IPlayer,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the player skill level.
            Use this to force set a player skill level.
            If you give a player experience the level will be set automatically.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="level">The level.</param>
            <param name="informClient">if set to <c>true</c> the server will inform the client.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.SetAbilityTier(Vintagestory.API.Common.IPlayer,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the ability tier.
            Use this method to set the tier of a player ability.
            This method is used by the default gui to set a ability tier.
            In general you don't need to call this method.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="abilityId">The ability identifier.</param>
            <param name="tier">The tier.</param>
            <param name="informServer">if set to <c>true</c> the client informs the server that the player has chosen a tier.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.IncreaseAbilityTier(Vintagestory.API.Common.IPlayer,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Increases the ability tier.
            Use this method to increases the tier of a player ability.
            This method is used by the default gui to set a ability tier.
            In general you don't need to call this method.
            </summary>
            <param name="player">The player.</param>
            <param name="skillId">The skill identifier.</param>
            <param name="abilityId">The ability identifier.</param>
            <param name="informServer">if set to <c>true</c> the client informs the server that the player has chosen a tier.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.SetPlayerKnowledge(Vintagestory.API.Common.IPlayer,System.String,System.Int32)">
            <summary>
            Sets the player knowledge.
            </summary>
            <param name="player">The player.</param>
            <param name="name">The knowledge name.</param>
            <param name="level">The knowledge level.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.GetPointsForUnlearn">
            <summary>
            Returns the number of points you need to unlearn a skill
            </summary>
            <returns>
            the number of points you need to unlearn a skill
            </returns>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.CommandErrorResult(System.String)">
            <summary>
            Converts an error message to a TextCommandResult
            </summary>
            <param name="msg">The message</param>
            <returns>A command error result</returns>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnSkillLevelCommand(Vintagestory.API.Common.TextCommandCallingArgs)">
            <summary>
            Called when the level command was called.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnSkillExpCommand(Vintagestory.API.Common.TextCommandCallingArgs)">
            <summary>
            Called when the exp command was called.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnAbilityTierCommand(Vintagestory.API.Common.TextCommandCallingArgs)">
            <summary>
            Called when the tier command was called.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnSkillSetCommand(Vintagestory.API.Common.TextCommandCallingArgs)">
            <summary>
            Called when the skillset command was called.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:XLib.XLeveling.XLevelingServer.OnSkillBookCommand(Vintagestory.API.Common.TextCommandCallingArgs)">
            <summary>
            Called when the skillbook command was called.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
    </members>
</doc>
